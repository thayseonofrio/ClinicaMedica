<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DHTMLX</name>
    </assembly>
    <members>
        <member name="T:DHTMLX.Common.DataAction">
            <summary>
            Representation of update action response
            </summary>
        </member>
        <member name="F:DHTMLX.Common.DataAction.status">
            <summary>
            String representation of dataAction type
            </summary>
        </member>
        <member name="M:DHTMLX.Common.DataAction.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Create new instance of DataAction object
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:DHTMLX.Common.DataAction.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create new instance of DataAction object
            </summary>
            <param name="status"></param>
            <param name="source_id"></param>
            <param name="target_id"></param>
        </member>
        <member name="M:DHTMLX.Common.DataAction.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Create new instance of DataAction object
            </summary>
            <param name="status"></param>
            <param name="source_id"></param>
            <param name="target_id"></param>
        </member>
        <member name="M:DHTMLX.Common.DataAction.#ctor(DHTMLX.Common.DataActionTypes,System.Int32,System.Int32)">
            <summary>
            Create new instance of DataAction object
            </summary>
            <param name="status"></param>
            <param name="source_id"></param>
            <param name="target_id"></param>
        </member>
        <member name="P:DHTMLX.Common.DataAction.Type">
            <summary>
            Data action result type
            </summary>
        </member>
        <member name="P:DHTMLX.Common.DataAction.SourceId">
            <summary>
            Source event id
            </summary>
        </member>
        <member name="P:DHTMLX.Common.DataAction.TargetId">
            <summary>
            Postoperational event id value
            </summary>
        </member>
        <member name="P:DHTMLX.Common.DataAction.Message">
            <summary>
            Additional info to be sent to the client
            </summary>
        </member>
        <member name="T:DHTMLX.Common.DataActionTypes">
            <summary>
            DHTMLX data action types
            </summary>
        </member>
        <member name="F:DHTMLX.Common.DataActionTypes.Insert">
            <summary>
            Inserted event
            </summary>
        </member>
        <member name="F:DHTMLX.Common.DataActionTypes.Update">
            <summary>
            Updated event
            </summary>
        </member>
        <member name="F:DHTMLX.Common.DataActionTypes.Delete">
            <summary>
            Deleted event
            </summary>
        </member>
        <member name="F:DHTMLX.Common.DataActionTypes.Error">
            <summary>
            Error/Invalid operation
            </summary>
        </member>
        <member name="T:DHTMLX.Common.DataActionResult">
            <summary>
            Represents action against particular event
            </summary>
        </member>
        <member name="M:DHTMLX.Common.DataActionResult.ParseType(System.String)">
            <summary>
            Convert sting description of dataaction to DataActionTypes member
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:DHTMLX.Common.DataActionResult.Types">
            <summary>
            DataActionTypes to string dictionary
            </summary>
        </member>
        <member name="M:DHTMLX.Common.DataActionResult.ParseItem(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Parse form collection, create event object as dictionary string, object
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.DataActionResult.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Create new instance of DataActionResult
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:DHTMLX.Common.DataActionResult.Event">
            <summary>
            dhtmlxScheduler updated event instance
            </summary>
        </member>
        <member name="P:DHTMLX.Common.DataActionResult.Result">
            <summary>
            Get result of dataAction
            </summary>
        </member>
        <member name="T:DHTMLX.Common.DHXEventsHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:DHTMLX.Common.DHXEventsHelper.Bind(System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates object instance from name-value collection
            </summary>
            <param name="obj">Object type</param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.DHXEventsHelper.Bind(System.Type,System.Collections.Specialized.NameValueCollection,System.Globalization.CultureInfo)">
            <summary>
            Creates object instance from name-value collection
            </summary>
            <param name="obj">Object type</param>
            <param name="values"></param>
            <param name="culture">Culture info</param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.DHXEventsHelper.Update(System.Object,System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="source">Object to take values from</param>
            <param name="target">Object to be updated</param>
            <param name="except">Properties that shouldn't be changed</param>
        </member>
        <member name="M:DHTMLX.Common.DHXEventsHelper.Update(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="source">Object to take values from</param>
            <param name="target">Object to be updated</param>
        </member>
        <member name="M:DHTMLX.Common.DHXEventsHelper.GetOccurrences(System.Collections.IEnumerable,System.DateTime,System.DateTime)">
            <summary>
            Get events occurrences in specified timespan
            </summary>
            <param name="items"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.DHXEventsHelper.Next(System.DateTime,System.DayOfWeek)">
            <summary>Gets the first week day following a date.</summary>
            <param name="date">The date.</param>
            <param name="dayOfWeek">The day of week to return.</param>
            <returns>The first dayOfWeek day following date, or date if it is on dayOfWeek.</returns>
        </member>
        <member name="T:DHTMLX.Common.PropertiesContainer`1">
            <summary>
            Generic container class for scheduler item settings
            </summary>
            <typeparam name="T">Type of the property values</typeparam>
        </member>
        <member name="F:DHTMLX.Common.PropertiesContainer`1._Values">
            <summary>
            Actual properties values collection
            </summary>
        </member>
        <member name="F:DHTMLX.Common.PropertiesContainer`1._Defaults">
            <summary>
            Default values collection
            </summary>
        </member>
        <member name="M:DHTMLX.Common.PropertiesContainer`1.SetDefaults(System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            Add defaults values
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:DHTMLX.Common.PropertiesContainer`1.Add(System.String,`0)">
            <summary>
            Set value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:DHTMLX.Common.PropertiesContainer`1.GetKeys">
            <summary>
            Get all properties keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.PropertiesContainer`1.Reset">
            <summary>
            Reset values
            </summary>
        </member>
        <member name="M:DHTMLX.Common.PropertiesContainer`1.Clear">
            <summary>
            Reset values
            </summary>
        </member>
        <member name="M:DHTMLX.Common.PropertiesContainer`1.ContainsKey(System.String)">
            <summary>
            Determines whether values dictionary contains specified key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.PropertiesContainer`1.IsNullOrDefault(System.String)">
            <summary>
            Whether specified key value is null or default
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.PropertiesContainer`1.Render(System.String)">
            <summary>
            Render properties
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.PropertiesContainer`1.GetEnumerator">
            <summary>
            Return an enumerator that iterates throught values collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.PropertiesContainer`1.ToDictionary(System.Boolean)">
            <summary>
            Convert propertyes collection to dictionary
            </summary>
            <param name="takeDefaultValues">Put default values to result</param>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Common.PropertiesContainer`1.Count">
            <summary>
            Get non-default values count
            </summary>
        </member>
        <member name="P:DHTMLX.Common.PropertiesContainer`1.Item(System.String)">
            <summary>
            Get property
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.Common.CommonPropertiesContainer">
            <summary>
            Container class for scheduler item settings
            </summary>
        </member>
        <member name="M:DHTMLX.Common.CommonPropertiesContainer.getType(System.Object)">
            <summary>
            Get type of the property
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.CommonPropertiesContainer.Render(System.String)">
            <summary>
            Render property
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.CommonPropertiesContainer.Render(System.String,System.Object)">
            <summary>
            Render property
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.Common.CommonPropertiesContainer.PropertyTypes">
            <summary>
            Available types of properties, defines how the field is going to be rendered
            </summary>
        </member>
        <member name="F:DHTMLX.Common.CommonPropertiesContainer.PropertyTypes.Boolean">
            <summary>
            Gets rendered as {true} or {false}
            </summary>
        </member>
        <member name="F:DHTMLX.Common.CommonPropertiesContainer.PropertyTypes.String">
            <summary>
            Gets rendered as {'value'}
            </summary>
        </member>
        <member name="F:DHTMLX.Common.CommonPropertiesContainer.PropertyTypes.Numeric">
            <summary>
            Gets rendered as {value}
            </summary>
        </member>
        <member name="F:DHTMLX.Common.CommonPropertiesContainer.PropertyTypes.JSONObject">
            <summary>
            gets rendered as json object(not now, but maybe someday...)
            </summary>
        </member>
        <member name="T:DHTMLX.Common.AjaxSaveResponse">
            <summary>
            Class to generate responce for update requests
            </summary>
        </member>
        <member name="F:DHTMLX.Common.AjaxSaveResponse.action">
            <summary>
            Action
            </summary>
        </member>
        <member name="F:DHTMLX.Common.AjaxSaveResponse.updateFields">
            <summary>
            Updated fields collection
            </summary>
        </member>
        <member name="F:DHTMLX.Common.AjaxSaveResponse.DateFormat">
            <summary>
            Needed when custom fields going to be updated from the server side during data saving, must match scheduler.config.xml_date setting on the client
            </summary>
        </member>
        <member name="M:DHTMLX.Common.AjaxSaveResponse.getUpdatedFieldsString">
            <summary>
            Field which will be updated on the client after response
            </summary>
            <returns>XML fragment</returns>
        </member>
        <member name="M:DHTMLX.Common.AjaxSaveResponse.UpdateField(System.String,System.Object)">
            <summary>
            Field value which will be sent back to client after update, can be handled by dataprocessor
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DHTMLX.Common.AjaxSaveResponse.UpdateFields(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Field values which will be sent back to client after update, can be handled by dataprocessor
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:DHTMLX.Common.AjaxSaveResponse.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initialize save response writter by form collections
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DHTMLX.Common.AjaxSaveResponse.#ctor(DHTMLX.Common.DataAction)">
            <summary>
            Initialize save response writter by DataAction
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:DHTMLX.Common.AjaxSaveResponse.Render">
            <summary>
            Render response
            </summary>
            <returns>XML string</returns>
        </member>
        <member name="M:DHTMLX.Common.AjaxSaveResponse.op_Implicit(DHTMLX.Common.AjaxSaveResponse)~System.String">
            <summary>
            Convert SchedulerAjaxSave instance to string
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.AjaxSaveResponse.op_Implicit(DHTMLX.Common.AjaxSaveResponse)~System.Web.Mvc.ContentResult">
            <summary>
            Convert SchedulerAjaxSave instance to ContentResult
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Common.AjaxSaveResponse.ToContentResult(DHTMLX.Common.AjaxSaveResponse)">
            <summary>
            Convert SchedulerAjaxSave instance to ContentResult
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.FileType">
            <summary>
            Location of source file
            </summary>
        </member>
        <member name="F:DHTMLX.FileType.Local">
            <summary>
            Local file
            </summary>
        </member>
        <member name="F:DHTMLX.FileType.Remote">
            <summary>
            File from remote server
            </summary>
        </member>
        <member name="F:DHTMLX.FileType.Virtual">
            <summary>
            File is generated by lib
            </summary>
        </member>
        <member name="T:DHTMLX.SourceType">
            <summary>
            Source file types
            </summary>
        </member>
        <member name="F:DHTMLX.SourceType.JS">
            <summary>
            JavaSctipt files
            </summary>
        </member>
        <member name="F:DHTMLX.SourceType.CSS">
            <summary>
            CSS files
            </summary>
        </member>
        <member name="T:DHTMLX.DHTMLX">
            <summary>
            Dhtmlx helpers
            </summary>
        </member>
        <member name="M:DHTMLX.DHTMLX.Scheduler(System.Collections.IEnumerable)">
            <summary>
            Return code for basic scheduler initialization with statically loaded events
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.DHTMLX.Scheduler(System.Object)">
            <summary>
            Return code for basic scheduler initialization with statically loaded events
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.DHTMLX.Scheduler">
            <summary>
            Return code for basic scheduler initialization
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.DHTMLX.Scheduler(DHTMLX.Scheduler.DHXScheduler)">
            <summary>
            Renders scheduler configuration to js code
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.DHTMLX.Scheduler(System.Object,System.Object)">
            <summary>
            Renders scheduler configuration to js code, statically load events
            </summary>
            <param name="config"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.DHTMLX.ToICal(System.String,System.String)">
            <summary>
            Renders control to export scheduler content to iCal
            </summary>
            <param name="button_text">Action button text("To iCal" by default)</param>
            <param name="url">AjaxUrl of export service(by default it's 'Export' action on current controller)</param>
            <returns>HTML form</returns> 
        </member>
        <member name="M:DHTMLX.DHTMLX.ToICal(System.String,System.String,System.String)">
            <summary>
            Renders control to export scheduler content to iCal
            </summary>
            <param name="button_text">Action button text("To iCal" by default)</param>
            <param name="url">AjaxUrl of export service(by default it's 'Export' action on current controller)</param>
            <param name="id">Id attibute of form('scheduler_toICal_control' by default)</param>
            <returns>HTML form</returns>
        </member>
        <member name="M:DHTMLX.DHTMLX.ToPDF(System.String,System.String)">
            <summary>
            Renders control to export scheduler content to Pdf
            </summary>
            <param name="button_text">Action button text("To PDF" by default)</param>
            <param name="url">AjaxUrl of export service(by default it's 'Export' action on current controller)</param>
            <returns>HTML form</returns>
        </member>
        <member name="M:DHTMLX.DHTMLX.ToPDF(System.String,System.String,System.String)">
            <summary>
            Renders control to export scheduler content to Pdf
            </summary>
            <param name="button_text">Action button text("To PDF" by default)</param>
            <param name="url">AjaxUrl of export service(by default it's 'Export' action on current controller)</param>
            <param name="id">Id attibute of form('scheduler_toPDF_control' by default)</param>
            <returns>HTML form</returns>
        </member>
        <member name="T:DHTMLX.HtmlHelperExtensions">
            <summary>
            Extensions for System.Web.Mvc.Html class
            </summary>
        </member>
        <member name="M:DHTMLX.HtmlHelperExtensions.DHTMLX(System.Web.Mvc.HtmlHelper)">
            <summary>
            DHTMLX helper
            </summary>
            <param name="helper"></param>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.Helpers.RecTypes">
            <summary>
            Available types of recurring event
            </summary>
        </member>
        <member name="T:DHTMLX.Helpers.RecurringType">
            <summary>
            Parsed type of recurring event
            </summary>
        </member>
        <member name="T:DHTMLX.JSONHelper">
            <summary>
            Add ToJSON method
            </summary>
        </member>
        <member name="M:DHTMLX.JSONHelper.ToJSON(System.Object)">
            <summary>
            Add ToJSON method
            </summary>
        </member>
        <member name="M:DHTMLX.JSONHelper.ToJSON(System.Object,System.Int32)">
            <summary>
            Add ToJSON method
            </summary>
        </member>
        <member name="T:DHTMLX.FileGrabber">
            <summary>
            Class to get source files content
            </summary>
        </member>
        <member name="F:DHTMLX.FileGrabber.client">
            <summary>
            Web client, used to get remote files content
            </summary>
        </member>
        <member name="M:DHTMLX.FileGrabber.GetLocalFile(System.String)">
            <summary>
            Get local file content
            </summary>
            <param name="path">File path</param>
            <returns>File content</returns>
        </member>
        <member name="M:DHTMLX.FileGrabber.GetRemoteFile(System.String)">
            <summary>
            Get content of file from remote server
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.DictionaryMerger">
            <summary>
            Helper class which is used to merge dictionaries
            </summary>
        </member>
        <member name="M:DHTMLX.DictionaryMerger.Merge(System.Collections.Generic.IEnumerable{System.Collections.Generic.Dictionary{System.String,DHTMLX.FileType}})">
            <summary>
            Merge collection of dictionaries
            </summary>
            <param name="dictionaries"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.DictionaryMerger.Merge(System.Collections.Generic.Dictionary{System.String,DHTMLX.FileType},System.Collections.Generic.Dictionary{System.String,DHTMLX.FileType})">
            <summary>
            Merge two dictionaries
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.DictionaryMerger.Join(System.Collections.Generic.Dictionary{System.String,DHTMLX.FileType}@,System.Collections.Generic.Dictionary{System.String,DHTMLX.FileType})">
            <summary>
            Add values from second dictionarie to the first one
            </summary>
            <param name="first"></param>
            <param name="target"></param>
        </member>
        <member name="T:DHTMLX.DateFormatHelper">
            <summary>
            Helper class to convert dhtmlx date format to common date format
            </summary>
        </member>
        <member name="F:DHTMLX.DateFormatHelper.formats">
            <summary>
            dhtmlx-.net date mask dictionary
            </summary>
        </member>
        <member name="M:DHTMLX.DateFormatHelper.ConvertInnerFormatToNet(System.String)">
            <summary>
            Convert dhtmlx date format to .net date format
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.DateFormatHelper.ConvertNetFormatToInner(System.String)">
            <summary>
            Convert .net date format to dhtmlx date format
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.DateFormatHelper.DateToJS(System.DateTime)">
            <summary>
            Converts DateTime to equivalent javascript date 
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.DateFormatHelper.DateToJS(System.DateTime,System.Boolean)">
            <summary>
            Converts DateTime to equivalent javascript date 
            </summary>
            <param name="detailed"> If true, result string will include hours and minutes</param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Zone">
            <summary>
            
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Zone.Start">
            <summary>
            Start time(in minutes)
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Zone.End">
            <summary>
            End time(in minutes)
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Zone.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerTimeSpanMarker.Mark(System.DayOfWeek,DHTMLX.Scheduler.Zone[])">
            <summary>
            Mark time areas of specific date 
            </summary>
            <param name="day"></param>
            <param name="zones"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerTimeSpanMarker.Mark(System.DateTime)">
            <summary>
            Mark full day of specific date 
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerTimeSpanMarker.Mark(System.DateTime,DHTMLX.Scheduler.Zone[])">
            <summary>
            Mark time areas of specific date
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerTimeSpanMarker.Mark(System.DayOfWeek)">
            <summary>
            Full day mark of specific day of week 
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.SchedulerLightboxFieldFactory">
            <summary>
            Factory wich used for deserialization of lightbox
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightboxFieldFactory.Create(System.String,System.String)">
            <summary>
            Create instance of LightboxField object by it's type name
            </summary>
            <param name="type">field type</param>
            <param name="name">field name</param>
            <returns>LightboxField</returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.SchedulerViewFactory">
            <summary>
            Factory wich used for deserialization of views
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerViewFactory.Create(System.String,System.String)">
            <summary>
            Create instance of SchedulerView object by it's type name
            </summary>
            <param name="type">View type</param>
            <param name="name">View name</param>
            <returns>SchedulerView</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ServerListHelper`1.AddOption(`0)">
            <summary>
            Add option to control
            </summary>
            <param name="option"></param>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.ExpressionRule">
            <summary>
            Represents rule for filter, if event apply the conditions of the rule it will be shown in scheduler
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.FieldRule">
            <summary>
            Base class for filter rules
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.FieldRule.Render">
            <summary>
            Render filter function
            </summary>
            <returns></returns>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.FieldRule._Default">
            <summary>
            Value of empty rule
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExpressionRule.#ctor">
            <summary>
            Create new instance of expression
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExpressionRule.#ctor(System.String)">
            <summary>
            Create new instance of expression
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExpressionRule.Render">
            <summary>
            Render filter function
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.ExpressionRule.Expression">
            <summary>
            Condition template
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.Filter">
            <summary>
            Helper for the client-side
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Filter._Name">
            <summary>
            Common template
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Filter._FunctionBegin">
            <summary>
            Common template
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Filter._FunctionEnd">
            <summary>
            Common template
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.Filter.#ctor(System.String)">
            <summary>
            Create new instance of the filter
            </summary>
            <param name="viewName">Name of the view filter attached to</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.Filter.#ctor(DHTMLX.Scheduler.Controls.Filter)">
            <summary>
            Create new instance of the filter
            </summary>
            <param name="clone"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.Filter.RenderName(System.String)">
            <summary>
            Render js variable name
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.Filter.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render filter function
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.Filter.RenderBody">
            <summary>
            Render filter function body
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.Filter.Rules">
            <summary>
            List of filter's rules
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.Filter._ViewName">
            <summary>
            Name of the view filter attached to
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.Operator">
            <summary>
            Filter rule operators
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Operator.Equals">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Operator.NotEquals">
            <summary>
            !=
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Operator.Identical">
            <summary>
            ===
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Operator.NotIdentical">
            <summary>
            !==
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Operator.Greater">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Operator.GreaterOrEqual">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Operator.Lower">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Operator.LowerOrEqual">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Operator.GreaterOrIdentical">
            <summary>
            &gt;==
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Operator.LowerOrIdentical">
            <summary>
            &lt;==
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.Rule">
            <summary>
            Represents simple rule for filter, if event apply the conditions of the rule it will be shown in scheduler
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.Rule.#ctor(System.String,DHTMLX.Scheduler.Controls.Operator,System.Object)">
            <summary>
            Creates new instance of Rule
            </summary>
            <param name="RuleField">Field to compare</param>
            <param name="CompareOperator">Compare operator</param>
            <param name="CompareValue">Value to compare field with</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.Rule.Render">
            <summary>
            Converts this Rule into javascript string
            </summary>
            <returns>String representation of this FieldRule</returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.Rule.Field">
            <summary>
            Field to compare
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.Rule.Value">
            <summary>
            Value to compare field with
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.Rule.Operator">
            <summary>
            
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.MiniCalendar">
            <summary>
            Class that represents clien-side mini calendar
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.SchedulerControlsItem">
            <summary>
            Basic class for scheduler controls elements
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.SchedulerControlsItem._properties">
            <summary>
            Collection of item's properties
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.SchedulerControlsItem._hiddenProperties">
            <summary>
            Properties that doesn't going to be rendered
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsItem.Set(System.String,System.Object)">
            <summary>
            Set property value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsItem.GetObject(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsItem.Get(System.String)">
            <summary>
            Get property value as string
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsItem.GetDate(System.String)">
            <summary>
            Get property value as DateTime
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsItem.GetRaw(System.String)">
            <summary>
            Get property value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsItem.GetInt(System.String)">
            <summary>
            Get property value as int
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsItem.GetBool(System.String)">
            <summary>
            Get property value as bool
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsItem.GetJS">
            <summary>
            Get js files which is reqired by current configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsItem.GetCSS">
            <summary>
            Get css files which is reqired by current configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsItem.Deserialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Deserialize item
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsItem.Serialize">
            <summary>
            Serialize item
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsItem.GetVisibleProperties">
            <summary>
            Return collection of properties, which is not marked as hidden
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendar.#ctor">
            <summary>
            Create instance of MiniCalendar class
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendar.#ctor(System.String)">
            <summary>
            Create MiniCalendar nested in DOM element
            </summary>
            <param name="container">DOM element ID</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendar.GetJS">
            <summary>
            Returns required JS files
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendar.AttachToHeader(System.String)">
            <summary>
            Attachs mini calendar to scheduler's header
            </summary>
            <param name="position"></param>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.MiniCalendar.Handler">
            <summary>
            Mini calendar onDateSelect handler(js function)
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.MiniCalendar.IsAttachedToHeader">
             <summary>
            Whether mini calendar is attached to scheduler or other dom element
             </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.MiniCalendar.Position">
            <summary>
            Css class name of scheduler element, where calendar should be applied(mini calendar will appear on click on element with this classname)
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.MiniCalendar.Container">
            <summary>
            Id of DOM element where mini calendar shoud be placed
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.MiniCalendar.Date">
            <summary>
            Selected date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.MiniCalendar.Navigation">
            <summary>
            Allow/Deny month scroll
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.MiniCalendarManager">
            <summary>
            Class to manage mini calendars in scheduler
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.SchedulerControlsBase">
            <summary>
            Basic class for scheduler contorls configurators
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.SchedulerControlsBase.data">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsBase._getAttached(DHTMLX.SourceType)">
            <summary>
            Get required files
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsBase.GetJS">
            <summary>
            Get js files which is reqired by current configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsBase.GetCSS">
            <summary>
            Get css files which is reqired by current configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsBase._renderStart(System.Text.StringBuilder,System.String)">
            <summary>
            Generate code which should be inserted before main content
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsBase._renderEnd(System.Text.StringBuilder,System.String)">
            <summary>
            Generate code which should be inserted after main content
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsBase._renderContent(System.Text.StringBuilder,System.String)">
            <summary>
            Render main content
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsBase.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Return js code of curent current configuration 
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsBase.AfterInit">
            <summary>
            Code which should be inserted after scheduler.init call
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsBase.Serialize">
            <summary>
            Serialize control
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsBase.Deserialize(System.Object)">
            <summary>
            Deserialize control
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsBase.IsSet">
            <summary>
            Check if settings differ from defaults
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerControlsBase.Clear">
            <summary>
            Reset to default
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.SchedulerControlsBase.Items">
            <summary>
            Get content items
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.MiniCalendarManager.defaultContainer">
            <summary>
            Class name of DOM element which mini calendar applyed to
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.MiniCalendarManager.defaultNavigation">
            <summary>
            Allow/Deny month scrolling in minicalendar
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.MiniCalendarManager.defaultDate">
            <summary>
            Initial date of the mini calendar(current scheduler date by default)
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.MiniCalendarManager.defaultDateString">
            <summary>
            Property where default date value for scheduler is stored
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendarManager.Add(DHTMLX.Scheduler.Controls.MiniCalendar)">
            <summary>
            Add Mini calendar
            </summary>
            <param name="obj">new MiniCalendar</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendarManager.AttachMiniCalendar">
            <summary>
            Show the mini calendar in the scheduler header
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendarManager.AttachMiniCalendar(System.DateTime)">
            <summary>
            Mini calendar will always show and mark currently visible date range in scheduler
            </summary>
            <param name="date">Initial date of mini calendar</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendarManager.AttachMiniCalendar(System.Boolean)">
            <summary>
            Mini calendar will always show and mark currently visible date range in scheduler
            </summary>
            <param name="navigation">should navigation between months be allowed or not</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendarManager.AttachMiniCalendar(System.String)">
            <summary>
            Mini calendar will always show and mark currently visible date range in scheduler
            </summary>
            <param name="position">Css class name of item for miniCalendar to be attached to</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendarManager.AttachMiniCalendar(System.DateTime,System.Boolean,System.String)">
            <summary>
            Mini calendar will always show and mark currently visible date range in scheduler
            </summary>
            <param name="date">Initial date of mini calendar</param>
            <param name="navigation">should navigation between months be allowed or not</param>
            <param name="position">Css class name of item for miniCalendar to be attached to</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendarManager.RenderTab(System.String)">
            <summary>
            Renders icon for mini calendar
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendarManager.RenderTab(DHTMLX.Scheduler.DHXScheduler.Skins,System.String)">
            <summary>
            Renders icon for mini calendar
            </summary>
            <returns></returns>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.MiniCalendarManager.after_init">
            <summary>
            Conde which should be inserted after scheduler.init() call
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendarManager.AfterInit">
            <summary>
            Code which should be inserted after scheduler.init call
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendarManager.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Renders mini calendars initialization code
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MiniCalendarManager._renderCalendar(DHTMLX.Scheduler.Controls.MiniCalendar,System.String)">
            <summary>
            render calendar item
            </summary>
            <param name="cal"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.Scheduler.SchedulerExtensions">
            <summary>
            Class which allows to add extensions files to dhtmlxScheduler,
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.translate">
            <summary>
            extension name - required file dictionary
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.translateCss">
            <summary>
            extension name - required file dictionary
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions._files">
            <summary>
            Collection of required js files
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions._style">
            <summary>
            Collection of required css
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerExtensions.GetCSS">
            <summary>
            Get required js files
            </summary>
            <returns>Paths to required files</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerExtensions.GetJS">
            <summary>
            Get required js files
            </summary>
            <returns>Paths to required files</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerExtensions.Clear">
            <summary>
            Reset to default
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerExtensions.IsSet">
            <summary>
            Returns true if extensions were added
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerExtensions.Add(DHTMLX.Scheduler.SchedulerExtensions.Extension)">
            <summary>
            Add link to dhtmlxScheduler extension
            </summary>
            <param name="ext"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerExtensions.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render settings
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="P:DHTMLX.Scheduler.SchedulerExtensions.Items">
            <summary>
            Extensions configurators
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.SchedulerExtensions.Extension">
            <summary>
            dhtmlxScheduler extensions 
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.ActiveLinks">
            <summary>
            Dates as links.
            Expected effect: day labels in month view will become a links, clicking on which will switch scheduler to the dayly view.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.AgendaView">
            <summary>
            Agenda view.
            View allows to see a list of oncoming events
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Collision">
            <summary>
            Preventing events collisions.
            Deny creation of the second event if one event has been already defined at that time.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Cookie">
            <summary>
            Save state in cookie.
            Expected effect: scheduler will save its current state ( mode, and date ) in a cookies, so when same page will be opened next time, it will show it in the same state as was before page closing.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Editors">
            <summary>
            Extende lightbox editors
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Expand">
            <summary>
            Fullscreen view.
            Expected effect: scheduler will have expand icon at the right corner, clicking on which will change it size to “full screen”. Second click will restore an original size.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.HtmlTemplates">
            <summary>
            HTML templates.
            Expected effect: adds ability to define templates directly in html cod
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.KeyboardNavigation">
            <summary>
            Keyboard navigation.
            Expected effect: scheduler will react on “right” and “left” keys by scrolling to the next or previous time period ( next day, next week or next month, according to the currently active view )
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Limit">
            <summary>
            Limiting date-scale.
            This extension allows to limit active dates ( a user won't be able to see the dates outside defined date or to create events during not-active dates )
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.MapView">
            <summary>
            Map view.
            The view contains Google Map and allows to display events location on it.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Matrix">
            <summary>
            Cell mode of Timeline view
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Minical">
            <summary>
            Mini calendar.
            Mini calendar provides ability to render a small month view in any html container on a page. It has an optional “on-date-selected” handler and can be used to simplify date selection or for some other tasks.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Multiselect">
            <summary>
            Multiselect control for lighbox form
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Multisource">
            <summary>
            Multiple sources.
            Expected effect: scheduler will be able to use multiple source file for loading operations, including dyn. loading from multiple sources.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Offline">
            <summary>
            Offline mode scheduler.
            Expected effect: page with scheduler will be cached and available from offline.
            Works only in browsers that supports html5 cache manifest
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.OuterDrag">
            <summary>
            External Drag 'n Drop.
            Allow to use DnD between scheduler and other DHTMLX components
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.PDF">
            <summary>
            Export to PDF.
            To export scheduler data to PDF you just need to add a button on the page, which will call the scheduler.toPDF('pdf generator url') method. The parameter of the toPDF() method is the url of the script, which has been installed previously:
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Readonly">
            <summary>
            Readonly view.
            Expected effect: scheduler will be able to show details form in readonly state.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Serialize">
             <summary>
             Export data from the scheduler.
             Export to XML:
             var xml = scheduler.toXML(); //xml string
            
             Export to JSON:
             var json_string = scheduler.toJSON(); //json string
            
             Export to iCal:
             var ical_string = scheduler.toICal();
             </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Tooltip">
            <summary>
            Tooltips.
            This extension allows to create tooltips over events in the scheduler which could be used to display additional information about event without need to actually 'open' event to check it.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.TreeTimeline">
            <summary>
            Hierarchical Data Structure (tree mode)
            Allow to use tree mode in timeline view
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Url">
            <summary>
            Save state in URL.
            Expected effect: scheduler will save its current state ( mode, and date ) in a URL, so when same page will be opened next time, it will show it in the same state as was before page closing. In addition to saving functionality, it adds the ability to provide links for specific date in scheduler.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.WeekAgenda">
            <summary>
            Week agenda view.
            Week agenda is a combination of week and agenda views presenting a list of oncoming events inside a week.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.GridView">
            <summary>
            Grid view.
            Display events in table
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.YearView">
            <summary>
            Year view.
            View allows to see a list of oncoming events
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerExtensions.Extension.Recurring">
            <summary>
            Enables recurring events support
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.SchedulerLightbox">
            <summary>
            Confugurator for scheduler lightbox
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.SchedulerLightbox.externalLighbox">
            <summary>
            Using native lightbox of the custom one
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightbox._renderContent(System.Text.StringBuilder,System.String)">
            <summary>
            Render lightbox content
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightbox.AfterInit">
            <summary>
            Code which will be inserted after scheduler.init call
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightbox.Clear">
            <summary>
            Removes lightbox items
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightbox.Add(DHTMLX.Scheduler.Controls.LightboxItem)">
            <summary>
            Add lighbox control
            </summary>
            <param name="obj">new LightboxItem</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightbox.Deserialize(System.Object)">
            <summary>
            Deserialize object
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightbox.SetExternalLightboxForm(System.String)">
            <summary>
            Using form(partial view shown in iframe element) instead of native scheduler lightbox, form uses lightbox api,
            lightbox.save() 
            lightbox.remove() 
            lightbox.close() functions is available from the context of form,
            view must contain following functions
            object window.getValues()
            window.setValues(object)
            which will be used by dhtmlx scheduler to populate form with event values and get edited event back
            </summary>
            <param name="viewName">Path to the view which will be used for lightbox</param>
            <returns>added ExternalLightboxForm</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightbox.SetExternalLightboxForm(System.String,System.Int32,System.Int32)">
            <summary>
            Using form(partial view shown in iframe element) instead of native scheduler lightbox, form uses lightbox api,
            lightbox.save() 
            lightbox.remove() 
            lightbox.close() functions is available from the context of form,
            view must contain following functions
            object window.getValues()
            window.setValues(object)
            which will be used by dhtmlx scheduler to populate form with event values and get edited event back
            </summary>
            <param name="viewName">Path to the view which will be used for lightbox</param>
            <param name="width">Lightbox width</param>
            <param name="height">Lightbox height</param>
            <returns>added ExternalLightboxForm</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightbox.SetExternalLightboxForm(System.String,System.String)">
            <summary>
            Using form(partial view shown in iframe element) instead of native scheduler lightbox, form uses lightbox api,
            lightbox.save() 
            lightbox.remove() 
            lightbox.close() functions is available from the context of form,
            view must contain following functions
            object window.getValues()
            window.setValues(object)
            which will be used by dhtmlx scheduler to populate form with event values and get edited event back
            </summary>
            <param name="viewName">Path to the view which will be used for lightbox</param>
            <param name="className">CSS class, which will be appended to form</param>
            <returns>added ExternalLightboxForm</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightbox.SetExternalLightbox(System.String)">
            <summary>
            Using form(partial view shown in iframe element) instead of native scheduler controls, which doesn't use any scheduler api,
            when lightbox means to be opened, scheduler pass current event id to provided view, which is supposed
            to process CRUD operations.
            unsert/update/delete/error actions must send back js code, which will update scheduler and remove iframe with form
            response could be generated by DHTMLX.Scheduler.Data.SchedulerFormResponseScript class
            </summary>
            <param name="viewName">Path to the view which will be used for lightbox</param>
            <returns>added ExternalLightboxControl</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightbox.SetExternalLightbox(System.String,System.Int32,System.Int32)">
            <summary>
            Using form(partial view shown in iframe element) instead of native scheduler controls, which doesn't use any scheduler api,
            when lightbox means to be opened, scheduler pass current event id to provided view, which is supposed
            to process CRUD operations.
            unsert/update/delete/error actions must send back js code, which will update scheduler and remove iframe with form
            response could be generated by DHTMLX.Scheduler.Data.SchedulerFormResponseScript class
            </summary>
            <param name="viewName">Path to the view which will be used for lightbox</param>
            <param name="width">Lightbox width</param>
            <param name="height">Lightbox height</param>
            <returns>added ExternalLightboxControl</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightbox.SetExternalLightbox(System.String,System.String)">
            <summary>
            Using form(partial view shown in iframe element) instead of native scheduler lightbox, which doesn't use any scheduler api,
            when lightbox means to be opened, scheduler pass current event id to provided view, which is supposed
            to process CRUD operations.
            unsert/update/delete/error actions must send back js code, which will update scheduler and remove iframe with form
            response could be generated by DHTMLX.Scheduler.Data.SchedulerFormResponseScript class
            </summary>
            <param name="viewName">Path to the view which will be used for lightbox</param>
            <param name="className">CSS class, which will be appended to form</param>
            <returns>added ExternalLightboxControl</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerLightbox.AddDefaults">
            <summary>
            Add default set of controls to lightbox
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.LightboxItem">
            <summary>
            Base class for lightbox items
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxItem.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Return json representation of lightbox item
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxItem.AfterInit">
            <summary>
            Code which will be inserted after scheduler.init call
            </summary>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.LightboxField">
            <summary>
            Basic class for lightbox editors
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxField.#ctor(System.String,System.String)">
            <summary>
            Initialize LightboxField
            </summary>
            <param name="name"></param>
            <param name="label"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxField.RenderLabel(System.String)">
            <summary>
            Return js code for declaration of lightbox item label
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxField.MapTo">
            <summary>
             Property of the event maped to the editor
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxField.Label">
            <summary>
            The editor label text
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxField.Type">
            <summary>
            The editor's type, defines how editor will be rendered on the client
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxField.Name">
            <summary>
            Name of the editor
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxField.Height">
            <summary>
            The height of an editor
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.LightboxText">
            <summary>
            Class that represents scheduler lightbox textarea input
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxText.#ctor(System.String,System.String)">
            <summary>
            Create new instance of lightbox text field
            </summary>
            <param name="name"></param>
            <param name="label"></param>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxText.Focus">
            <summary>
            If set to true, related field will receive focus on form showing
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.LightboxSelect">
            <summary>
            Class that represents scheduler lightbox select input
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.LightboxSelect.options">
            <summary>
            Collection of options
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxSelect.#ctor(System.String,System.String)">
            <summary>
            Create new instance of lightbox select field
            </summary>
            <param name="name"></param>
            <param name="label"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxSelect.AddOption(DHTMLX.Scheduler.Controls.LightboxSelectOption)">
            <summary>
            Add option to control
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxSelect.AddOptions(System.Collections.IEnumerable)">
            <summary>
            Add range of options to control, onptions may be stored in scheduler.serverList collection, and control will have it's link. So multiple controls may have the same options collection
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxSelect.AddOptions(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Add range of options to control, onptions may be stored in scheduler.serverList collection, and control will have it's link. So multiple controls may have the same options collection
            </summary>
            <param name="opts"></param>
            <param name="direct">If true, control will have it's copy of options, otherwise it will have a link to shared colleciton</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxSelect.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Return json representation of lightbox item
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxSelect.RenderOptions(System.Text.StringBuilder,System.String)">
            <summary>
            Return json representation item options
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxSelect.Deserialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Serialize item
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxSelect.Serialize">
            <summary>
            Deserialize item
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxSelect.ServerList">
            <summary>
            Allows to get or explicitly specify server list for the control
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.LightboxSelectOption">
            <summary>
            Class that represents elements of select, radiobutton and multiselect
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxSelectOption.#ctor(System.Object,System.Object)">
            <summary>
            Create new instance of option
            </summary>
            <param name="key"></param>
            <param name="label"></param>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxSelectOption.Key">
            <summary>
            Item value
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxSelectOption.Label">
            <summary>
            Item label
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.LightboxRadio">
            <summary>
            Class that represents scheduler lightbox radiobutton
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxRadio.#ctor(System.String,System.String)">
            <summary>
            Create new instance of lightbox radiobutton
            </summary>
            <param name="name"></param>
            <param name="label"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxRadio.GetJS">
            <summary>
            Get required js files
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxRadio.Vertical">
            <summary>
            Vertical placement
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.LightboxMultiselect">
            <summary>
            Class that represents scheduler lightbox multiselect
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxMultiselect.#ctor(System.String,System.String)">
            <summary>
            Create new instance of multiselect field
            </summary>
            <param name="name"></param>
            <param name="label"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxMultiselect.GetJS">
            <summary>
            Get js files which is reqired by multiselect field
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxMultiselect.ScriptUrl">
            <summary>
            AjaxUrl containing options data
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxMultiselect.Vertical">
            <summary>
            Vertical placement
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.LightboxTime">
            <summary>
            Class that represents scheduler lightbox time input
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxTime.#ctor(System.String,System.String)">
            <summary>
            Create new instance of lightbox time field
            </summary>
            <param name="name"></param>
            <param name="label"></param>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.LightboxMiniCalendar">
            <summary>
            Class that represents scheduler lightbox miniCalendar input
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxMiniCalendar.#ctor(System.String,System.String)">
            <summary>
            Create new instance of scheduler miniCalendar field
            </summary>
            <param name="name"></param>
            <param name="label"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxMiniCalendar.GetJS">
            <summary>
            Get js files which is reqired by current miniCalendar
            </summary>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.LightboxCheckbox">
            <summary>
            Class that represents scheduler lightbox checkbox input
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxCheckbox.#ctor(System.String,System.String)">
            <summary>
            Create new instance of lightbox checkbox field 
            </summary>
            <param name="name"></param>
            <param name="label"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxCheckbox.GetJS">
            <summary>
            Get js files which is reqired by checkbox
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxCheckbox.CheckedValue">
            <summary>
            This value will be returned if checkbox is checked. By default true is used.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxCheckbox.UncheckedValue">
            <summary>
            This value will be returned if checkbox is unchecked. By default false is used.
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.LightboxRecurringBlock">
            <summary>
            Class that represents scheduler lightbox recurring events block
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxRecurringBlock.#ctor(System.String,System.String)">
            <summary>
            Create new instance of lightbox reccuring block
            </summary>
            <param name="name"></param>
            <param name="label"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.LightboxRecurringBlock.GetJS">
            <summary>
            Get js files which is reqired by reccuring block
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.LightboxRecurringBlock.Button">
            <summary>
            Displayed button type
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.ExternalLightboxForm">
            <summary>
            Using form(partial view shown in iframe element) instead of native scheduler lightbox, form uses lightbox api,
            lightbox.save() 
            lightbox.remove() 
            lightbox.close() functions is available from the context of form,
            view must contain following functions
            object window.getValues()
            window.setValues(object)
            which will be used by dhtmlx scheduler to populate form with event values and get edited event back
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExternalLightboxForm.GetJS">
            <summary>
            Get js files which is reqired by ExternalLightboxForm
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExternalLightboxForm._clearValues(System.String)">
            <summary>
            Create function to clear user form
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExternalLightboxForm.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render settings
            </summary>
            <returns>JS code string</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExternalLightboxForm.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create new instance of ExternalLightboxForm
            </summary>
            <param name="view">Path to the view which will be used for lightbox</param>
            <param name="width">lightbox width</param>
            <param name="height">lightbox height</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExternalLightboxForm.#ctor(System.String,System.String)">
            <summary>
            Create new instance of ExternalLightboxForm
            </summary>
            <param name="view">Path to the view which will be used for lightbox</param>
            <param name="classname">CSS class, which will be appended to form</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExternalLightboxForm.#ctor(System.String)">
            <summary>
            Create new instance of ExternalLightboxForm
            </summary>
            <param name="view">Path to the view which will be used for lightbox</param>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.ExternalLightboxForm.Width">
            <summary>
            The width of an iframe with lightbox
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.ExternalLightboxForm.Height">
            <summary>
            The height of an iframe with lightbox
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.ExternalLightboxForm.ClassName">
            <summary>
            css class to be attached to iframe
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.ExternalLightboxForm.View">
            <summary>
            Path to view
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.ExternalLightboxForm.UseSchedulerLightboxBorder">
            <summary>
            Display custom form inside lightbox border of not, true by default
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.ExternalLightboxControl">
            <summary>
            Using form(partial view shown in iframe element) instead of native scheduler lightbox, which doesn't use any scheduler api,
            when lightbox means to be opened, scheduler pass current event id to provided view, which is supposed
            to process CRUD operations.
            unsert/update/delete/error actions must send back js code, which will update scheduler and remove iframe with form
            response could be generated by DHTMLX.Scheduler.Data.SchedulerFormResponseScript class
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExternalLightboxControl.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render settings
            </summary>
            <returns>JS code string</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExternalLightboxControl.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create new instance of ExternalLightboxControl
            </summary>
            <param name="view">Path to the view which will be used for lightbox</param>
            <param name="width">lightbox width</param>
            <param name="height">lightbox height</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExternalLightboxControl.#ctor(System.String,System.String)">
            <summary>
            Create new instance of ExternalLightboxControl
            </summary>
            <param name="view">Path to the view which will be used for lightbox</param>
            <param name="classname">CSS class, which will be appended to form</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.ExternalLightboxControl.#ctor(System.String)">
            <summary>
            Create new instance of ExternalLightboxControl
            </summary>
            <param name="view">Path to the view which will be used for lightbox</param>
        </member>
        <member name="T:DHTMLX.Scheduler.SchedulerLocalization">
            <summary>
            Class that allows to set localization of scheduler
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization._files">
            <summary>
            Collection of required files
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerLocalization.GetJS">
            <summary>
            Get required js files
            </summary>
            <returns>Paths to required files</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerLocalization.Clear">
            <summary>
            Reset to default
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerLocalization.IsSet">
            <summary>
            Returns true if localization was added
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerLocalization.Set(DHTMLX.Scheduler.SchedulerLocalization.Localizations)">
            <summary>
            Add link to dhtmlxScheduler localization files
            </summary>
            <param name="locale"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerLocalization.Set(DHTMLX.Scheduler.SchedulerLocalization.Localizations,System.Boolean)">
            <summary>
            Add link to dhtmlxScheduler localization files
            </summary>
            <param name="locale">Localization</param>
            <param name="recurring">should a link to recurring events localization be added or not(true by default)</param>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerLocalization.Set(System.String)">
            <summary>
            Add link to dhtmlxScheduler localization files, in case localization enum does not contain needed one
            </summary>
            <param name="locale">short name for localization</param>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerLocalization.Set(System.String,System.Boolean)">
            <summary>
            Add link to dhtmlxScheduler localization files, in case localization enum does not contain needed one
            </summary>
            <param name="locale">short name for localization</param>
            <param name="recurring">should a link to recurring events localization be added or not(true by default)</param>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.translate">
            <summary>
            hash of enum members and related source file names
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.SchedulerLocalization.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render settings
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="P:DHTMLX.Scheduler.SchedulerLocalization.Directory">
            <summary>
            Directory where localizations are stored, the path relative to codebase directory
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.SchedulerLocalization.Localizations">
            <summary>
            dhtmlxScheduler localizations 
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Arabic">
            <summary>
            Arabic localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.English">
            <summary>
            English localization(default)
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Catalan">
            <summary>
            Catalan localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Chinese">
            <summary>
            Chinese localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Czech">
            <summary>
            Czech localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Danish">
            <summary>
            Danish localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Dutch">
            <summary>
            Dutch localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Finnish">
            <summary>
            Finnish localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.French">
            <summary>
            French localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.German">
            <summary>
            German localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Greek">
            <summary>
            Greek localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Hebrew">
            <summary>
            Hebrew localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Hungarian">
            <summary>
            Hungarian localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Indonesia">
            <summary>
            Indonesia localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Italian">
            <summary>
            Italian localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Japanese">
            <summary>
            Japanese localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Norwegian">
            <summary>
            Norwegian localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Polish">
            <summary>
            Polish localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Portuguese">
            <summary>
            Portuguese localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Russian">
            <summary>
            Russian localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Slovenian">
            <summary>
            Slovenian localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Spanish">
            <summary>
            Spanish localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Swedish">
            <summary>
            Swedish localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Turkish">
            <summary>
            Turkish localization
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.SchedulerLocalization.Localizations.Ukrainian">
            <summary>
            Ukrainian localization
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.UnitsView">
            <summary>
            View, where x-scale is based on some property of events (not only on time).
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.SchedulerView">
            <summary>
            Base class for scheduler view
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerView.#ctor">
            <summary>
            Create new instance of SchedulerView
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerView.RenderLabel(System.Text.StringBuilder,System.String)">
            <summary>
            Render view label text definition
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerView.RenderTab">
            <summary>
            Create div for view tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerView.RenderTab(DHTMLX.Scheduler.DHXScheduler.Skins)">
            <summary>
            Create div for view tab
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerView.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render settings
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.SchedulerView.Label">
            <summary>
            View tab text
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.SchedulerView.Name">
            <summary>
            View name
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.SchedulerView.ViewType">
            <summary>
            Type of the view
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.SchedulerView.TabPosition">
            <summary>
            Tab left margin
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.SchedulerView.TabWidth">
            <summary>
            Width of the view's label
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.SchedulerView.TabClass">
            <summary>
            Css class for the view tab
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.SchedulerView.TabStyle">
            <summary>
            Css style to be applyed to the tab
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.UnitsView.AddOption(DHTMLX.Scheduler.Controls.Unit)">
            <summary>
            Add unit to UnitView
            </summary>
            <param name="unit">new Unit</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.UnitsView.AddOptions(System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Add range of units in UnitView
            </summary>
            <param name="units">Dictionary, key value will be interpreted as unit key, value - as unit label</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.UnitsView.AddOptions(System.Collections.IEnumerable)">
            <summary>
            Add range of units in UnitView
            </summary>
            <param name="units">Collection of Units or objects, which must contain "key" and "label" properties</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.UnitsView.AddOptions(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Add range of options to control, onptions may be stored in scheduler.serverList collection, and control will have it's link. So multiple controls may have the same options collection
            </summary>
            <param name="opts"></param>
            <param name="direct">If true, control will have it's copy of options, otherwise it will have a link to shared colleciton</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.UnitsView.SetServerList(System.String)">
            <summary>
            Allows to explicitly specify server list for the control
            </summary>
            <param name="listId"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.UnitsView._AddOptions(System.Collections.IEnumerable)">
            <summary>
            Add range of units in UnitView
            </summary>
            <param name="units">Collection of Units or objects, which must contain "key" and "label" properties</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.UnitsView.#ctor(System.String,System.String)">
            <summary>
            Create new instance of UnitsView class
            </summary>
            <param name="name">View name</param>
            <param name="property">The name of event property, which holds info for x-position</param>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.UnitsView._units">
            <summary>
            Collection of units
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.UnitsView.GetJS">
            <summary>
            Get required sources
            </summary>
            <returns>Path to required extension</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.UnitsView.Serialize">
            <summary>
            Serialize view
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.UnitsView.Deserialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Deserialize view
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.UnitsView.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render view settings
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.UnitsView.ServerList">
            <summary>
            Allows to get or explicitly specify server list for the control
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.UnitsView.Property">
            <summary>
            The name of event property, which holds info for x-position
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.UnitsView.Size">
            <summary>
            Defines how much units must be shown on the screen
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.UnitsView.Step">
            <summary>
            Defines scroll step
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.UnitsView.SkipIncorrect">
            <summary>
            Skip events which belongs to none of the defined units
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.YearView">
            <summary>
            View allows to see a list of oncoming events
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.YearView.#ctor">
            <summary>
            Create new instance of YearView
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.YearView.GetJS">
            <summary>
            Get required sources
            </summary>
            <returns>Path to required extension</returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.DayView">
            <summary>
            Scheduler day view
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.DayView.#ctor">
            <summary>
            Create instance of day view
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.WeekView">
            <summary>
            Scheduler week view
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.WeekView.#ctor">
            <summary>
            Create instance of week view
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.MonthView">
            <summary>
            Scheduler month view
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MonthView.#ctor">
            <summary>
            Create instance of month view
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.AgendaView">
            <summary>
            View allows to see a list of oncoming events
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.AgendaView.#ctor">
            <summary>
            Create new instance of AgendaView
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.AgendaView.GetJS">
            <summary>
            Get required sources
            </summary>
            <returns>Path to required extension</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.AgendaView.SetTimeFrame(DHTMLX.Scheduler.TimeUnits,System.Int32)">
            <summary>
            Show not all upcomming events, but only part of them
            </summary>
            <param name="unit"></param>
            <param name="number"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.AgendaView.SetTimeFrame(DHTMLX.Scheduler.TimeUnits)">
            <summary>
            Show not all upcomming events, but only part of them
            </summary>
            <param name="unit"></param>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.WeekAgendaView">
            <summary>
            Week agenda is a combination of week and agenda views presenting a list of oncoming events inside a week.
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.WeekAgendaView.#ctor">
            <summary>
            Create new instance of WeekAgendaView
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.WeekAgendaView.GetJS">
            <summary>
            Get required sources
            </summary>
            <returns>Path to required extension</returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.MapView">
            <summary>
            The view contains Google Map and allows to display events location on it.
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MapView.#ctor">
            <summary>
            Create new instance of MapView
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MapView.GetJS">
            <summary>
            Get required sources
            </summary>
            <returns>Path to required extension</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MapView.SetInitialPosition(System.Double,System.Double)">
            <summary>
            Inital position of the map
            </summary>
            <param name="lat"></param>
            <param name="lng"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MapView.SetErrorPosition(System.Double,System.Double)">
            <summary>
            This position will be displayed in case if event doesn't have corresponding coordinates
            </summary>
            <param name="lat"></param>
            <param name="lng"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.MapView.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render settings
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.MapView.SectionLocation">
            <summary>
            Name of the location section in lightbox
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.MapView.MarkerGeoSuccess">
            <summary>
            Message in info window in case of successful geolocation response
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.MapView.MarkerGeoFail">
            <summary>
            Message in info window in case of unsuccessful geolocation response
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.TimelineView">
            <summary>
            In timeline view, vertical scale presents event holders, while vertical scale is a configurable time-scale.
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineView.#ctor(System.String,System.String)">
            <summary>
            Create new instance of TimelineView
            </summary>
            <param name="name">View name</param>
            <param name="y_property">Name of event's property, which holds info for y-position</param>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineView._units">
            <summary>
            Collection of unist
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineView.AddSecondScale(DHTMLX.Scheduler.Controls.TimelineView.XScaleUnits,System.String)">
            <summary>
            This option adds another x scale on top of the default one and serves to group time intervals on the original scale. Available with 3.0+ version.
            </summary>
            <param name="x_unit">Size of units on X scale ( can be hour, day, week, month, year )</param>
            <param name="x_date">Date format which should be used for second scale</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineView.AddOption(DHTMLX.Scheduler.Controls.TimelineUnit)">
            <summary>
            Add unit to timeline view
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineView.AddOption(System.Object)">
            <summary>
            Add unit to timeline view
            </summary>
            <param name="unit">new TimelineUnit</param>
            <returns>Added unit</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineView.AddOptions(System.Collections.IEnumerable)">
            <summary>
            Add units to timeline view
            </summary>
            <summary>
            Add range of options to control, onptions may be stored in scheduler.serverList collection, and control will have it's link. So multiple controls may have the same options collection
            </summary>
            <param name="units"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineView.AddOptions(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Add range of options to control, onptions may be stored in scheduler.serverList collection, and control will have it's link. So multiple controls may have the same options collection
            </summary>
            <param name="opts"></param>
            <param name="direct">If true, control will have it's copy of options, otherwise it will have a link to shared colleciton</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineView._AddOptions(System.Collections.IEnumerable)">
            <summary>
            Add units to timeline view
            </summary>
            <param name="units">Collection of TimelineUnits or objects, which must contain "key" and "label" properties, "open" is optional</param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineView.GetJS">
            <summary>
            Get required sources
            </summary>
            <returns>Path to required extension</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineView.Serialize">
            <summary>
            Serialize view
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineView.Deserialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Deserialize view
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineView.RenderItems">
            <summary>
            Render units
            </summary>
            <returns>List of string</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineView.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render settings
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.ServerList">
            <summary>
            Allows to get or explicitly specify server list for the control
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.RenderMode">
            <summary>
            The name of a mode (“bar”, “cell” or “tree”). This parameter is reserved for future updates
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.Dy">
            <summary>
            The minimal height of cells (if SectionAutoheight parameter has value 'false', the height of the cells will be equal to dy, otherwise the height of the cells will be increase to fill all free space).
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.Dx">
            <summary>
            The width of the first column.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.EventDy">
            <summary>
            The event height.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.EventMinDy">
            <summary>
            The minimum event height.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.FullEventDy">
            <summary>
            If set true, event will occupy the entire cell
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.SectionAutoheight">
            <summary>
            Assigns automatic height adjustment of the cells
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.FolderEventsAvailable">
            <summary>
            Need to be set as “true” if you want to have the possibility to specify an event not only for individual event holder but also for the whole folder (any level).
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.FitEvents">
            <summary>
            If section height should be increased to fit all events in there or should it be fixed (dy property). Set to true by default. Available starting with version 3.0
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.ResizeEvents">
            <summary>
            Allow to resize events by dnd
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.FolderDy">
            <summary>
            The height of folders in pixels (nonapplicable for cells with folder names)
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.X_Unit">
            <summary>
            Size of units on X scale ( can be minute, hour, day, week, month, year )
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.X_Step">
            <summary>
            Size of single scale step ( size defined in “x_unit”s)
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.X_Size">
            <summary>
            How must steps need to be shown
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.X_Start">
            <summary>
            Value of minimal step
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.X_Length">
            <summary>
            How much x_step need to be used to fill the whole day ( it is necessary only if you are using minute or hour as x_unit )
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.Y_Property">
            <summary>
            Name of event's property
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineView.X_Date">
            <summary>
            Date format which should be used for second scale, “July 01”
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.TimelineView.RenderModes">
            <summary>
            Modes of TimelineView
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineView.RenderModes.Bar">
            <summary>
            In this mode, events look like lines.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineView.RenderModes.Cell">
            <summary>
            In cell mode, events 'fill' with colour full cells.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineView.RenderModes.Tree">
            <summary>
            Hierarchical data structure
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.TimelineView.XScaleUnits">
            <summary>
            Size of units on X scale
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineView.XScaleUnits.Minute">
            <summary>
            Minute
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineView.XScaleUnits.Hour">
            <summary>
            Hour
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineView.XScaleUnits.Day">
            <summary>
            Day
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineView.XScaleUnits.Week">
            <summary>
            Week
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineView.XScaleUnits.Month">
            <summary>
            Month
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineView.XScaleUnits.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.GridView">
            <summary>
            Scheduler Grid view
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridView.#ctor">
            <summary>
            Create instance of the grid view
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridView.#ctor(System.String)">
            <summary>
            Create instance of the grid view
            </summary>
            <param name="name">view name</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridView.#ctor(System.Collections.IEnumerable)">
            <summary>
            Create instance of the grid view
            </summary>
            <param name="columns">Columns collection</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridView.AddOption(DHTMLX.Scheduler.Controls.GridViewColumn)">
            <summary>
            Add single column
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridView.AddOption(System.Object)">
            <summary>
            Add single column
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridView.AddOptions(System.Collections.IEnumerable)">
            <summary>
            Add range of columns
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridView.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render view settings
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridView.GetJS">
            <summary>
            Get required sources
            </summary>
            <returns>Path to required extension</returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridView.RowHeight">
            <summary>
            Event row height
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridView.From">
            <summary>
            Show events after date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridView.To">
            <summary>
            Show events before date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridView.Select">
            <summary>
            Enable events selecting
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridView.Paging">
            <summary>
            Enable months navigation(incompatible with From and To properties)
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridView.Columns">
            <summary>
            Grid view columns 
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.SchedulerViewsController">
            <summary>
            Class to manage available views
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.SchedulerViewsController.diff">
            <summary>
            Distance between tabs
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.SchedulerViewsController.baseTabPos">
            <summary>
            Position of the first tab
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerViewsController.#ctor">
            <summary>
            Create new instance of SchedulerViewsController. By default there is already 3 views added;
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerViewsController.Add(DHTMLX.Scheduler.Controls.SchedulerView)">
            <summary>
            Add view to scheduler
            </summary>
            <param name="obj">Scheduler view</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerViewsController._renderContent(System.Text.StringBuilder,System.String)">
            <summary>
            Render views
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerViewsController.GetViews">
            <summary>
            Get collection of scheduler views
            </summary>
            <returns>List of SchedulerView objects</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerViewsController.Serialize">
            <summary>
            Serialize configuration to object array
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.SchedulerViewsController.Deserialize(System.Object)">
            <summary>
            Deserialize configuration from the object 
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.SchedulerViewsController.Count">
            <summary>
            Returns number of added views
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.SchedulerViewsController.Item(System.Int32)">
            <summary>
            Get view
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.Unit">
            <summary>
            Unit for units view
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Unit._key">
            <summary>
            Unit key
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.Unit._label">
            <summary>
            Unit label
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.Unit.#ctor(System.Object,System.Object)">
            <summary>
            Create instance of unit class
            </summary>
            <param name="key">Unit key</param>
            <param name="label">Unit value</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.Unit.Render">
            <summary>
            Render settings
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.Unit.Key">
            <summary>
            Unit key
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.Unit.Label">
            <summary>
            Unit label
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.TimelineUnit">
            <summary>
            TimeLine view unit
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineUnit.elements">
            <summary>
            Collection of child units
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineUnit.label">
            <summary>
            Unit label
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineUnit.open">
            <summary>
            Unit state
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.TimelineUnit.key">
            <summary>
            Unit key
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineUnit.#ctor(System.Object,System.Object,System.Boolean)">
            <summary>
            Create TimelineUnit instance
            </summary>
            <param name="key">TimelineUnit key value</param>
            <param name="label">TimelineUnit label</param>
            <param name="open">If TimelineUnit has child units, defines should it be opened by default or not</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineUnit.AddOption(DHTMLX.Scheduler.Controls.TimelineUnit)">
            <summary>
            Add nested unit
            </summary>
            <param name="unit">new TimelineUnit</param>
            <returns>Added unit</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineUnit.AddOption(System.Object)">
            <summary>
            Add nested unit
            </summary>
            <param name="unit">new TimelineUnit</param>
            <returns>Added unit</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineUnit.AddOptions(System.Collections.IEnumerable)">
            <summary>
             Add collection of nested units
            </summary>
            <param name="units">Collection of TimelineUnits or objects, which must contain "key" and "label" properties, "open" is optional</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineUnit.Render">
            <summary>
            Render settings
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineUnit.Serialize">
            <summary>
            Serialize unit
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.TimelineUnit.Deserialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Deserialize unit
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.TimelineUnit.Items">
            <summary>
            Unit's child nodes
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.GridViewColumn">
            <summary>
            Column of the grid view
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridViewColumn.#ctor(System.String)">
            <summary>
            Create instance of GridView column
            </summary>
            <param name="id">field to be rendered in column</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridViewColumn.#ctor(System.String,System.String)">
            <summary>
            Create instance of GridView column
            </summary>
            <param name="id">field to be rendered in column</param>
            <param name="label">column header label</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridViewColumn.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create instance of GridView column
            </summary>
            <param name="id">field to be rendered in column</param>
            <param name="label">column header label</param>
            <param name="width">width of the column</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridViewColumn.SetCustomSort(System.String)">
            <summary>
            Custom sort rule
            </summary>
            <param name="funct">javascript function string, function takes 2 compared events as arguments, and should return 1 or -1 depending on which event is 'bigger' (e.g. "function(a,b){return a.text>b.text ? 1 : -1;}")</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridViewColumn.Render">
            <summary>
            Renders column configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Controls.GridViewColumn.FromObject(System.Object)">
            <summary>
            Convert anonymous object to GridViewColumn
            </summary>
            <param name="unparsed">object</param>
            <returns>GridViewColumn</returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridViewColumn.Id">
            <summary>
            Field to be rendered in the column
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridViewColumn.Label">
            <summary>
            Column header label
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridViewColumn.Width">
            <summary>
            Width of the column
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridViewColumn.Align">
            <summary>
            Horizontal align of the column content 
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridViewColumn.VAlign">
            <summary>
            Vertical align of the column content
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridViewColumn.Sorting">
            <summary>
            Sorting rule applied to the column
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Controls.GridViewColumn.Template">
            <summary>
            Defines how column content should be rendered
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.GridViewColumn.Aligns">
            <summary>
            Horizontal align of the column content 
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.GridViewColumn.Aligns.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.GridViewColumn.Aligns.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.GridViewColumn.Aligns.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.GridViewColumn.VAligns">
            <summary>
            Vertical align of the column content
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.GridViewColumn.VAligns.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.GridViewColumn.VAligns.Middle">
            <summary>
            Middle
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.GridViewColumn.VAligns.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Controls.GridViewColumn.Sort">
            <summary>
            Sorting rule applied to the column
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.GridViewColumn.Sort.String">
            <summary>
            Sort as strings
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.GridViewColumn.Sort.Number">
            <summary>
            Sort as numbers
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.GridViewColumn.Sort.Date">
            <summary>
            Sort as date
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Controls.GridViewColumn.Sort.Custom">
            <summary>
            Custom sort rule(must be defined using GridViewColumn.SetCustomSortRule(string))
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.DHXSchedulerDataItem">
            <summary>
            Scheduler event, just a wrapper class 
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Data.DHXSchedulerDataStore">
            <summary>
            Class which is responsable for parsing and rendering events
            
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.UseUTCDate">
            <summary>
            Renders dates without offset
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.DropOffset">
            <summary>
            Dates will be rendered without offset(default behavior)
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.items">
            <summary>
            Items collection
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.serializer">
            <summary>
            JavaScriptSerializer instance
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.formatter">
            <summary>
            Formatter object
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.#ctor">
            <summary>
            Create new instance of DHXSchedulerDataStore
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.Clear">
            <summary>
            Remove items
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.Add(System.Object)">
            <summary>
            Add scheduler event, event will be loaded statically
            </summary>
            <param name="item">Scheduler event, object must have 'start_date','end_date' and 'text' properties</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.Parse(System.Collections.IEnumerable)">
            <summary>
            Parse dataitems collection
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.Serialize">
            <summary>
            Serialize DataStore
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.Deserialize(System.Object)">
            <summary>
            Deserialize datastore
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.replaceDates(System.String)">
            <summary>
            Replace json serialized dates to string representaions
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.Callback(System.Text.RegularExpressions.Match)">
            <summary>
            Replace json serialized date to string representaion
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.Render(System.Action{System.Text.StringBuilder,System.Object})">
            <summary>
            Render dataitems collection to json array
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.Render">
            <summary>
            Render dataitems collection to json array
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.TimeOffset">
            <summary>
            Time offset, to be applyed when rendering date, no offset by default
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.ToUniversalTime">
            <summary>
            All dates will be converted to UTC before rendering
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.DateFormat">
            <summary>
            dhtmlx date format, must match scheduler.config.xml_date setting on the client
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.Count">
            <summary>
            Get number of items in datastore
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.DHXSchedulerDataStore.Item(System.Int32)">
            <summary>
            Get event object by index
            </summary>
            <param name="index"></param>
            <returns>Scheduler event</returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Data.ICalRenderer">
            <summary>
            Helper to render collection of objects into ical string
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.ICalRenderer.StartDate">
            <summary>
            name of the property containing event start date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.ICalRenderer.EndDate">
            <summary>
            name of the property containing event end date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.ICalRenderer.Text">
            <summary>
            name of the property containing event text
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Data.SchedulerAjaxCaller">
            <summary>
            Base class for ajax calls handlers
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Settings.SchedulerSettingsBase">
            <summary>
            Base class for scheduler settings classes
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerSettingsBase._prefix">
            <summary>
            Prefix which should inserted before each rendered property
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerSettingsBase._properties">
            <summary>
            Properties container
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.Reset">
            <summary>
            Reset settings to defaults
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.getProp(System.String)">
            <summary>
            Get property from container
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.setProp(System.String,System.Object)">
            <summary>
            Set property value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.getStringProp(System.String)">
            <summary>
            Get property from container
            </summary>
            <param name="name"></param>
            <returns>property value as string</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.setStringProp(System.String,System.String)">
            <summary>
            Set property value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.getBoolProp(System.String)">
            <summary>
            Get property from container
            </summary>
            <param name="name"></param>
            <returns>property value as boolean</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.setBoolProp(System.String,System.Boolean)">
            <summary>
            Set property value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.getIntProp(System.String)">
            <summary>
            Get property from container
            </summary>
            <param name="name"></param>
            <returns>property value as integer</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.setIntProp(System.String,System.Int32)">
            <summary>
            Set property value
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase._renderField(System.String)">
            <summary>
            Render specified property
            </summary>
            <param name="name">Property name</param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.GetJS">
            <summary>
            Get js files which is reqired by current configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.GetCSS">
            <summary>
            Get css files which is reqired by current configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render settings
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.AfterInit">
            <summary>
            Code which will be added after scheduler init call
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.Deserialize(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Deserilize settings
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerSettingsBase.Serialize">
            <summary>
            Serialize settings
            </summary>
            <returns></returns>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.SchedulerAjaxCaller._Urls">
            <summary>
            Collection of urls
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxCaller._Template">
            <summary>
            Caller initialization function
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxCaller.#ctor(System.String)">
            <summary>
            Initialize ajax caller
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxCaller.AddParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Add name,value collection of parameters to request's url
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxCaller.AddParameters(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Add name,value collection of parameters to request's url
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxCaller.AddParameter(System.String,System.Object)">
            <summary>
            Add name,value pair to request's url
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxCaller.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Generate code for ajax handler
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerAjaxCaller.Action">
            <summary>
            Controllers action which should be called to process request
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerAjaxCaller.Controller">
            <summary>
            Name of controller to process request
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerAjaxCaller.Enabled">
            <summary>
            If true handler code will be added to initialize scheduler script
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerAjaxCaller.RequestUrl">
            <summary>
            Request url, which ends with ? or &amp; depending on parameters
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerAjaxCaller.Url">
            <summary>
            Request url
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Data.SchedulerDataLoader">
            <summary>
            Class which is responsible for initial data loading
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.convertLoadingMode(DHTMLX.Scheduler.Data.SchedulerDataLoader.DynamicalLoadingMode)">
            <summary>
            Convert dynamical loading mode to string
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.convertDataFormat(DHTMLX.Scheduler.Data.SchedulerDataLoader.DataFormats)">
            <summary>
            Convert data format to string
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.EnableDynamicLoading(DHTMLX.Scheduler.Data.SchedulerDataLoader.DynamicalLoadingMode)">
            <summary>
            Scheduler will load only part of events, necessary to fill current viewable area.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.AddAction(System.String)">
            <summary>
            Adds new action for data loading(i.e. requests will be sent to the same controller)
            </summary>
            <param name="action">Action name</param>
            <returns>AjaxUrl object</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.AddPath(System.String)">
            <summary>
            Adds new url for data loading(data source)
            </summary>
            <param name="path">data url</param>
            <returns>AjaxUrl object</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.GetUrls">
            <summary>
            Returns all urls
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader._Template">
            <summary>
            Load data call _Template
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.#ctor(System.String)">
            <summary>
            Create dataloader, data action is "Data" by default
            </summary>
            <param name="controller">Controller which should process request</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.#ctor(System.String,System.String)">
            <summary>
            Create dataloader
            </summary>
            <param name="controller">Controller which should process request</param>
            <param name="action">Controller's action which should be called</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.PreventCache">
            <summary>
            Add current ticks value to url, to prevent caching of request
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.Load">
            <summary>
            Load data after scheduler initialization
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.Load(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Load data after scheduler initialization, add parameters to request url
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.preventCacheString(System.String)">
            <summary>
            Prevent cache setting
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.loadModeString(System.String)">
            <summary>
            Dynamic load setting
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.urlsString">
            <summary>
            Get comma separated urls
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataLoader.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Generates loader code
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataLoader.ExpectedDataFormat">
            <summary>
            Defines which dataformat should scheduler expect from request
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Data.SchedulerDataLoader.DataFormats">
            <summary>
            Formats of loaded data
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.SchedulerDataLoader.DataFormats.XML">
            <summary>
            Xml
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.SchedulerDataLoader.DataFormats.JSON">
            <summary>
            Json
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.SchedulerDataLoader.DataFormats.iCal">
            <summary>
            iCal
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Data.SchedulerDataLoader.DynamicalLoadingMode">
            <summary>
            Mode of dynamic loading
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.SchedulerDataLoader.DynamicalLoadingMode.Year">
            <summary>
            Calendar will request data for each year
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.SchedulerDataLoader.DynamicalLoadingMode.Month">
            <summary>
            Calendar will request data for each month
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.SchedulerDataLoader.DynamicalLoadingMode.Day">
            <summary>
            Calendar will request data for each day
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Data.SchedulerDataprocessor">
            <summary>
            Representation of dhtmlxDataprocessor
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataprocessor.convertMode(DHTMLX.Scheduler.Data.SchedulerDataprocessor.TransactionModes)">
            <summary>
            Convert transaction mode to string
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataprocessor._Template">
            <summary>
            Initialization of dataprocessor _Template
            </summary>
            <returns>JS function</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataprocessor.#ctor(System.String)">
            <summary>
            Create instance of dataprocessor, update action is "Save" by default
            </summary>
            <param name="controller">Controller which should process request</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataprocessor.#ctor(System.String,System.String)">
            <summary>
            Create instance of dataprocessor
            </summary>
            <param name="controller">Controller which should process request</param>
            <param name="action">Controller's action which should be called</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataprocessor.Enable">
            <summary>
            Initialize dataprocessor right after scheduler initialization
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataprocessor.Enable(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initialize dataprocessor right after scheduler initialization, add parameters to request url
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataprocessor.updateSaveWatcher(System.String)">
            <summary>
            Create function which will check after update responces for updated values
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataprocessor.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Generates dataprocessor code
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataprocessor.SendMode">
            <summary>
            Send records row by row or all at once, false by default. Should be set true for integration with dhtmlxConnectors)
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataprocessor.TransactionalMode">
            <summary>
            Request type used by dataprocessor
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataprocessor.UpdateFieldsAfterSave">
            <summary>
            Track after server responses for modified event fields
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Data.SchedulerDataprocessor.TransactionModes">
            <summary>
            Request type
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.SchedulerDataprocessor.TransactionModes.GET">
            <summary>
            GET request
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.SchedulerDataprocessor.TransactionModes.POST">
            <summary>
            POST request
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Data.Loaders.AjaxUrl">
            <summary>
            Class that represents url for dataprocessor and dataloader
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.Loaders.AjaxUrl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.Loaders.AjaxUrl.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="url">Url</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.Loaders.AjaxUrl.#ctor(System.String,System.String)">
            <summary>
            Constructor for mvc url, result url will look like "/controller/action[optional params]"
            </summary>
            <param name="controller">controller to send request to</param>
            <param name="action">action to process request</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.Loaders.AjaxUrl.AddParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Add parameters to url
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.Loaders.AjaxUrl.AddParameters(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Add name,value collection of parameters to request's url
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.Loaders.AjaxUrl.AddParameter(System.String,System.Object)">
            <summary>
            Add name,value pair to request's url
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.Loaders.AjaxUrl.Action">
            <summary>
            Controllers action which should be called to process request
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.Loaders.AjaxUrl.Controller">
            <summary>
            Name of controller to process request
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.Loaders.AjaxUrl.RequestUrl">
            <summary>
            Request url, which ends with ? or &amp; depending on parameters
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.Loaders.AjaxUrl.Url">
            <summary>
            Request url
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.Loaders.AjaxUrl.ParametersString">
            <summary>
            Get parameters which will be sended with request 
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.Loaders.AjaxUrl.Parameters">
            <summary>
            Parameters which will be added to the request url
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Data.SchedulerAjaxData">
            <summary>
            Class to render response for data request
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.SchedulerAjaxData.data">
            <summary>
            Data items collection
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxData.UseUTCDate">
            <summary>
            Renders dates without offset
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxData.DropOffset">
            <summary>
            Dates will be rendered without offset(default behavior)
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxData.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initialize data response by collection of items
            </summary>
            <param name="items">Items, which should be rendered to response</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxData.Add(System.Collections.IEnumerable)">
            <summary>
            Add items collection to data response
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxData.#ctor">
            <summary>
            Initialize empty data response
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxData.op_Implicit(DHTMLX.Scheduler.Data.SchedulerAjaxData)~System.String">
            <summary>
            Convert SchedulerAjaxData to string
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxData.op_Implicit(DHTMLX.Scheduler.Data.SchedulerAjaxData)~System.Web.Mvc.ContentResult">
            <summary>
            Converts SchedulerAjaxData to ContentResult
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerAjaxData.ToContentResult(DHTMLX.Scheduler.Data.SchedulerAjaxData)">
            <summary>
            Converts SchedulerAjaxData to ContentResult
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerAjaxData.TimeOffset">
            <summary>
            Time offset, to be applyed when rendering date, no offset by default
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerAjaxData.ToUniversalTime">
            <summary>
            All dates will be converted to UTC before rendering
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerAjaxData.DateFormat">
            <summary>
            dhtmlx date format, must match scheduler.config.xml_date setting on the client
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Data.SchedulerFormResponseScript">
            <summary>
            Response writer for .net form in lightbox
            Related class - ExternalLightboxControl
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Data.SchedulerFormResponseScript.action">
            <summary>
            Action result
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerFormResponseScript.#ctor(DHTMLX.Common.DataAction,System.Object)">
            <summary>
            Create new instance of SchedulerFormResponseScript
            </summary>
            <param name="action">Action result</param>
            <param name="ev">Updated event</param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerFormResponseScript.#ctor(System.Boolean)">
            <summary>
            Create new instance of SchedulerFormResponseScript
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerFormResponseScript.serializeEvent(System.Object)">
            <summary>
            Serialize event
            </summary>
            <param name="ev"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerFormResponseScript.Render(System.String)">
            <summary>
            Script which will close lightbox and update scheduler
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerFormResponseScript.op_Implicit(DHTMLX.Scheduler.Data.SchedulerFormResponseScript)~System.String">
            <summary>
            Convert SchedulerFormResponseScript to string
            </summary>
            <param name="data">SchedulerFormResponseScript</param>
            <returns>HTML Script tag with js code</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerFormResponseScript.op_Implicit(DHTMLX.Scheduler.Data.SchedulerFormResponseScript)~System.Web.Mvc.ContentResult">
            <summary>
            Convert SchedulerFormResponseScript to ContentResult
            </summary>
            <param name="data">SchedulerFormResponseScript</param>
            <returns>HTML Script tag with js code</returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerFormResponseScript.Event">
            <summary>
            Updated event instance
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Data.SchedulerDataManager">
            <summary>
            Class which is responsable for data operations - static loading, ajax loading and dataProcessor
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataManager.#ctor">
            <summary>
            Create new instance of SchedulerDataManager
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataManager.EnableDynamicLoading(DHTMLX.Scheduler.Data.SchedulerDataLoader.DynamicalLoadingMode)">
            <summary>
            Scheduler will load only part of events, necessary to fill current viewable area.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataManager.Parse(System.Collections.IEnumerable)">
            <summary>
            Parse dataitems collection
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataManager.DropOffset">
            <summary>
            Dates will be rendered without offset(default behavior)
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Data.SchedulerDataManager.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render data loader, dataProcessor and statically loaded data
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.EventRenderer">
            <summary>
            Allows to set custom renderer for data items
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.Pull">
            <summary>
            Data items contained
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.Loader">
            <summary>
            Data loader class
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.DataProcessor">
            <summary>
            server side implementation of dhtmlxDataProcessor
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.DateFormat">
            <summary>
            Dhtmlx data type 
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.TimeOffset">
            <summary>
            Time offset, to be applyed when rendering date, no offset by default
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.ToUniversalTime">
            <summary>
            All dates will be converted to UTC before rendering
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.Controller">
            <summary>
            Name of controller to process request
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.SaveAction">
            <summary>
            Name of controller's action to process update requests
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.DataAction">
            <summary>
            Name of controller's action to load data from
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.LoadDataUrl">
            <summary>
            Request url, which ends with ? or &amp;, depending on parameters
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.SaveDataUrl">
            <summary>
            Request url, which ends with ? or &amp;, depending on parameters
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.DataUrl">
            <summary>
            Request url for load data requests
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.SaveUrl">
            <summary>
            Request url for update requests
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Data.SchedulerDataManager.Count">
            <summary>
            Number of dataitems in Pull
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.TimeUnits">
            <summary>
            Time units
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.TimeUnits.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.TimeUnits.Year">
            <summary>
            
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.TimeUnits.Month">
            <summary>
            
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.TimeUnits.Week">
            <summary>
            
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.TimeUnits.Day">
            <summary>
            
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.TimeUnits.Hour">
            <summary>
            
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.TimeUnits.Minute">
            <summary>
            
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.DHXScheduler">
            <summary>
            Server-side representation of dhtmlxScheduler
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.GetServerList">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.GetServerList(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="F:DHTMLX.Scheduler.DHXScheduler._configuration">
            <summary>
            Settings of the main object
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.DHXScheduler._Settings">
            <summary>
            Settings objects collection
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.DHXScheduler._Controls">
            <summary>
            Controls objects collection
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.DHXScheduler._data">
            <summary>
            Data manager
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.SetUserDetails(System.Object,System.String)">
            <summary>
            Pass object with user settings to the client-side, it will be rendered to JSON object and stored in scheduler.currentUser
            </summary>
            <param name="data">User settings</param>
            <param name="userIdKey">Name of property which contains user id value</param>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.SetUserDetails(System.Object,System.String,System.String)">
            <summary>
            Pass object with user settings to the client-side, it will be rendered to JSON object and stored in scheduler.currentUser
            </summary>
            <param name="data">User settings</param>
            <param name="userIdKey">Name of property which contains user id value</param>
            <param name="eventUserIdKey">Name of property of event, which will be compared to the user id value</param>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.PreventCache">
            <summary>
            Add add uid to each data/update request to prevent browser cache
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.UpdateFieldsAfterSave">
            <summary>
            Allows to modify appointment's properties from server side, after event update
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.SetEditMode(DHTMLX.Scheduler.Authentication.EditModes[])">
            <summary>
            Set user rights
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.SetUserDetails(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Pass object with user settings to the client-side, it will be rendered to JSON object and stored in scheduler.currentUser
            </summary>
            <param name="data">User settings</param>
            <param name="userIdKey">Name of property which contains user id value</param>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.SetUserDetails(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Pass object with user settings to the client-side, it will be rendered to JSON object and stored in scheduler.currentUser
            </summary>
            <param name="data">User settings</param>
            <param name="userIdKey">Name of property which contains user id value</param>
            <param name="eventUserIdKey">Name of property of event, which will be compared to the user id value</param>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.EnableDynamicLoading(DHTMLX.Scheduler.Data.SchedulerDataLoader.DynamicalLoadingMode)">
            <summary>
            Scheduler will load only part of events, necessary to fill current viewable area.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.#ctor">
            <summary>
            Basic constructor of DHXScheduler.
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.#ctor(System.Web.Mvc.Controller)">
            <summary>
            Create new intance of scheduler configurator
            </summary>
            <param name="parent">Controller to handle save/data requests(e.g. new DHXScheduler(this);)</param>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.#ctor(System.String)">
            <summary>
            Basic constructor of DHXScheduler.
            </summary>
            <param name="name">Name of root variable("scheduler" by default)</param>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.#ctor(System.Web.Mvc.Controller,System.String)">
            <summary>
            Create new intance of scheduler configurator
            </summary>
            <param name="parent">Controller to handle save/data requests(e.g. new DHXScheduler(this);)</param>
            <param name="name">Name of the variable("scheduler" by default)</param>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.ToICal">
            <summary>
            Renders control to export scheduler content to iCal
            </summary>
            <returns>JS string</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.ToICal(System.String)">
            <summary>
            Renders control to export scheduler content to iCal
            </summary>
            <param name="url">AjaxUrl of export service(by default it's 'Export' action on current controller)</param>
            <returns>JS string</returns> 
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.ToICal(System.String,System.String)">
             <summary>
             Renders control to export scheduler content to iCal
             </summary>
             <param name="url">AjaxUrl of export service(by default it's 'Export' action on current controller)</param>
            <param name="paramName">Name of post parameter, which will contain data</param>
             <returns>JS string</returns> 
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.ToPDF">
            <summary>
            Renders JS code to export scheduler content to Pdf
            </summary>
            <returns>JS string</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.ToPDF(System.String)">
            <summary>
            Renders JS code to export scheduler content to Pdf
            </summary>     
            <param name="url">AjaxUrl of export service(by default it's 'Export' action on current controller)</param>
            <returns>JS string</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.ToPDF(System.String,DHTMLX.Scheduler.ExportColorScheme)">
            <summary>
            Renders JS code to export scheduler content to Pdf
            </summary>     
            <param name="url">AjaxUrl of export service(by default it's 'Export' action on current controller)</param>
            <param name="scheme">Color scheme</param>
            <returns>JS string</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.GenerateHTML">
            <summary>
            Generate html markup and initialization script
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.Render">
            <summary>
            Render scheduler configuration script and attach needed files
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.GenerateLinks">
            <summary>
            Render links to requred js and css files. Same thing as this.GenerateJS() + this.GenerateCSS()
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.GetJS">
            <summary>
            Get required sources
            </summary>
            <returns>Path to required extension</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.GetCSS">
            <summary>
            Get required css files
            </summary>
            <returns>Path to required files</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler._getAttached(DHTMLX.SourceType)">
            <summary>
            Get required files of selected extension
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler._generateSource(DHTMLX.SourceType,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Generate links, or get sources of required files
            </summary>
            <param name="ext"></param>
            <param name="pattern"></param>
            <param name="inline"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.GenerateJS">
            <summary>
            Create script sections for required js files 
            </summary>
            <param name="inline"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.GenerateJS(System.Boolean)">
            <summary>
            Create script sections for required js files 
            </summary>
            <param name="inline"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.GenerateCSS">
            <summary>
            Create script sections for required js files 
            </summary>
            <param name="inline"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.GenerateCSS(System.Boolean)">
            <summary>
            Create link(or style dependig on parameter) for required css files
            </summary>
            <param name="inline"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.Deserialize(System.String)">
            <summary>
            Deserialize scheduler
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.DHXScheduler.Serialize">
            <summary>
            Serialize scheduler
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Version">
            <summary>
            Will be added as parameter to js/css sources links(e.g. scheduler.js?Value)
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Skin">
            <summary>
            Skin of dhxScheduler, glossy by default
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Data">
            <summary>
            Object which responsable for data operations - static loading, ajax loading and dataProcessor
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Lightbox">
            <summary>
            Confugurator for scheduler lightbox
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Config">
            <summary>
            Configuration options
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.XY">
            <summary>
            Dimentions
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Templates">
            <summary>
            Templates are formatting functions, normally you don't need to define anything, they will be auto-created according to default config. 
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Calendars">
            <summary>
            Manage mini calendars
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Views">
            <summary>
            Manage available views
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Extensions">
            <summary>
            Add extensions files to dhtmlxScheduler
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Localization">
            <summary>
            Set dhtmlxScheduler localization
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Authentication">
            <summary>
            Class which allows to pass current user setting to client and define users permissions.
            Settings will be rendered to json object and stored in scheduler.currentUser field
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Width">
            <summary>
            Width of the scheduler
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Height">
            <summary>
            Height of the scheduler
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.HasBeforeInitCode">
            <summary>
            Returns true if custom code was added to BeforeInit
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.BeforeInit">
            <summary>
            Any custom js code which should be inserted before scheduler.init call
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.HasAfterInitCode">
            <summary>
            Returns true if custom code was added to AfterInit
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.AfterInit">
            <summary>
            Any custom js code which should be inserted after scheduler.init call
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Codebase">
            <summary>
            Path to codebase folder
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.InitialView">
            <summary>
            View that should be active after scheduler gets initialized
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.InitialDate">
            <summary>
            Initial date in scheduler, optional - current date will be used by default
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.Controller">
            <summary>
            Name of controller which should process data/update requests
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.DataAction">
            <summary>
            Name of controller's action which will be called for data requests
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.SaveAction">
            <summary>
            Name of controller's action which will be called for update requests
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.DataUrl">
            <summary>
            AjaxUrl for data request(Controller and DataActionResult properties) 
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.SaveUrl">
            <summary>
            AjaxUrl for save request(Controller and SaveAction properties) 
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.EnableDataprocessor">
            <summary>
            Defines whether dataprocessor will be initialised
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.LoadData">
            <summary>
            Defines whether data request will be send after scheudler initialization
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.ConnectorMode">
            <summary>
            Need to be set true in order to work with dhtmlx connectors
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.DataFormat">
            <summary>
            Format of data recieved from server, json by default
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.HasDefaultValues">
            <summary>
            Returns true if default event values were added
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.DHXScheduler.InitialValues">
            <summary>
            Default values for event's properties
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.DHXScheduler.Skins">
            <summary>
            Available skins
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.DHXScheduler.Skins.Standart">
            <summary>
            Standard scheduler skin
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.DHXScheduler.Skins.Glossy">
            <summary>
            Modern scheduler skin
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.DHXScheduler.Skins.Terrace">
            <summary>
            
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.DHXCollisionExtension">
            <summary>
            Collision extension configuration
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.GoogleCalendar.RequestHelper">
            <summary>
            http request helper
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.GoogleCalendar.RequestHelper.Send(System.String)">
            <summary>
            Sends request and returns response text
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.Scheduler.GoogleCalendarHelper">
            <summary>
            Google calendar helper
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.GoogleCalendarHelper.#ctor(System.String,System.String)">
            <summary>
            Create instance of google calendar helper
            </summary>
            <param name="login">google account login</param>
            <param name="password">google account password</param>
        </member>
        <member name="M:DHTMLX.Scheduler.GoogleCalendarHelper.ExportToGoogleCalendar(System.String,System.String)">
            <summary>
            Export ics to google calendar
            </summary>
            <param name="url">calendar url</param>
            <param name="ics">ics string</param>
        </member>
        <member name="M:DHTMLX.Scheduler.GoogleCalendarHelper.ExportToGoogleCalendar(System.String,System.Collections.IEnumerable)">
            <summary>
            Export collection on objects into google calendar(objects must have 'text', 'start_date', 'end_date' properties)
            </summary>
            <param name="url"></param>
            <param name="events"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.GoogleCalendarHelper.ExportToGoogleCalendar(System.String,System.Collections.Generic.IEnumerable{DHTMLX.Scheduler.GoogleCalendar.ICalEvent})">
            <summary>
            Export collection of icalEvents to google calendar
            </summary>
            <param name="url"></param>
            <param name="ics"></param>
        </member>
        <member name="T:DHTMLX.Scheduler.GoogleCalendar.ICalEvent">
            <summary>
            Ical event
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.GoogleCalendar.ICalEvent.Summary">
            <summary>
            Event title
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.GoogleCalendar.ICalEvent.SDate">
            <summary>
            Start date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.GoogleCalendar.ICalEvent.EDate">
            <summary>
            End date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.GoogleCalendar.ICalEvent.Description">
            <summary>
            Event description
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.GoogleCalendar.ICalEvent.ICalUID">
            <summary>
            Event id
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.GoogleCalendar.SchedulerEvent">
            <summary>
            Event with dhtmlxScheduler-compatible properties set
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.GoogleCalendar.SchedulerEvent.Convert(DHTMLX.Scheduler.GoogleCalendar.ICalEvent)">
            <summary>
            Convert ICalEvent into scheduler event
            </summary>
            <param name="ev"></param>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.GoogleCalendar.SchedulerEvent.text">
            <summary>
            Event title
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.GoogleCalendar.SchedulerEvent.start_date">
            <summary>
            Start date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.GoogleCalendar.SchedulerEvent.end_date">
            <summary>
            End date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.GoogleCalendar.SchedulerEvent.id">
            <summary>
            Event id
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.GoogleCalendar.SchedulerEvent.description">
            <summary>
            Event description
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.GoogleCalendar.ICalHelper">
            <summary>
            Class for loading events from ics feed
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.GoogleCalendar.ICalHelper.GetFromFeed(System.String)">
            <summary>
            Load events from ics url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.GoogleCalendar.ICalHelper.Parse(System.String)">
            <summary>
            Parse ics
            </summary>
            <param name="ics"></param>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Settings.SchedulerConfig">
            <summary>
            Configuration options
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerConfig.#ctor">
            <summary>
            Create instance of scheduler configuration
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.scroll_hour">
            <summary>
            Hour which will be at top of screen, after view mode update
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.event_duration">
            <summary>
            Used to set the initial duration of the event. 
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.cascade_event_count">
            <summary>
            Sets the maximum number of events in a cascade. Events more than the set value will be drown over the cascade.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.cascade_event_margin">
            <summary>
            Sets the left margin for the cascade of events.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.cascade_event_display">
            <summary>
            By default, events scheduled to the same time are displayed one by one. If you want to present such events as a cascade, set the option to true.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.update_render">
            <summary>
            If the option is set to true, each time when an event is updated, the whole view will be refreshed ( instead of a changed event only). It smooths size re-calculation but results in much more CPU consuming.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.prevent_cache">
            <summary>
            Add uid to data reqests, to prevent cache in ie
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.first_hour">
            <summary>
            Hour from which day and week scales start;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.hour_size_px">
            <summary>
            Height of 1 hour in pixels;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.last_hour">
            <summary>
            Hour from which day and week scales end.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.time_step">
            <summary>
            Minimal date size step in minutes;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.map_infowindow_max_width">
            <summary>
            Maximum width of the info window (marker's tooltip) on the map {integer}
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.map_zoom_after_resolve">
            <summary>
            Zoom that will be used to show your location if you agree to a browser offer to show it {boolean}
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.map_resolve_event_location">
            <summary>      
            If the locations of events have no latitude and longitude values in the database, you can activate the following option and the coordinates will be defined automatically during event loading {boolean}
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.map_inital_zoom">
            <summary>
            Initial zoom {integer}
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.map_resolve_user_location">
            <summary>
            Some browsers open up the opportunity to determine your location. And if you add this codeline, such opportunity will be offered during map loading {boolean}
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.map_type">
            <summary>
            Map type {takes one of the predifened values}
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.lightbox_recurring">
            <summary>
             {'ask' (default), 'instance', 'series'} defines the lightbox behavior while opening in the edit mode
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.occurrence_timestamp_in_utc">
            <summary>
            The option allows working with recurring events independently of time zones. If the option is enabled timestamps of events are stored as UNIX time
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.start_on_monday">
            <summary>
            If true week starts from Monday ( if false, week start from Sunday);   
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.mark_now">
            <summary>
            When it set to true, day and week view will have marker, which show current time  
            </summary>       
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.limit_time_select">
            <summary>
            Adjust time selects to first ahd last hour settings 
            </summary>       
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.isReadonly">
            <summary>
            If set to true - events in scheduler can't be created|changed|deleted; 1)
            </summary>    
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.show_loading">
            <summary>
            Shows the progress during data loading, useful for dynamic loading mode
            </summary>    
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.drag_resize">
            <summary>
            Allows resizing events by dnd;
            </summary>  
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.drag_move">
            <summary>
            Allows moving events by dnd;
            </summary>    
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.drag_create">
            <summary>
            Allows creating new events by dnd;
            </summary> 
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.dblclick_create">
            <summary>
            Allows creating new events by double click;
            </summary> 
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.details_on_create">
            <summary>
            Uses extended form on new event creation by drag or by dbl-click (option doesn't affect monthly view - where details form is the only way to change data);
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.edit_on_create">
            <summary>
            Shows form on new event creation;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.details_on_dblclick">
            <summary>
            Uses extended form on event double-click (double-click on existing event).
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.server_utc">
            <summary>
            If enabled component will convert server side dates from utc to local timezone, and backward during data sending to server;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.positive_closing">
            <summary>
            If outside click occurs during form edit, then form will be saved and event will be updated.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.multi_day">
            <summary>
            Enables rendering of multi-day events in daily and weekly views
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.full_day">
            <summary>
            If set to true - entry fields in 'Time period' section of details form are blocked, and time period is set to a full day from 0.00am the current cell data till 0.00am next day.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.auto_end_date">
            <summary>
            If set to true - when you change start event time or date, the end event time and date will be changed automatically in order to make the event duration value 60 minutes 
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.drag_lightbox">
            <summary>
            When set to true lightbox can be dragged by header, it is enabled by default
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.preserve_scroll">
            <summary>
            When set to true current scroll position is preserved when navigating between dates on the same view, it is enabled by default
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.highlight_displayed_event">
            <summary>
            Specifies whether events should be highlighted while displaying. By default - true
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.wide_form">
            <summary>
            Enables "wide" mode for lightbox
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.Tooltip_ClassName">
            <summary>
            Configuration for Tooltip extension. Sets the CSS classname of the tooltip window
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.Tooltip_timeout_to_display">
            <summary>
            Configuration for Tooltip extension. Delay of the rendering
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.Tooltip_delta_x">
            <summary>
            Configuration for Tooltip extension. X position relative to the cursor (positive - margin to the right, negative - to the left)
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.Tooltip_delta_y">
            <summary>
            Configuration for Tooltip extension. Y position relative to the cursor (positive - above the cursor, negative - below)
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.default_date">
            <summary>
            Header of day and week views;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.month_date">
            <summary>
            Header of month view;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.week_date">
            <summary>
            Subheader, days of week in month view;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.day_date">
            <summary>
            Subheader, day label in day and week views;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.hour_date">
            <summary>
            Vertical scale for day and week views;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.month_day">
            <summary>
            Each day block in month view;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.api_date">
            <summary>
            Used to set dates in events using api methods.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.xml_date">
            <summary>
            Used to define format of data in data xml
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.repeat_date">
            <summary>
            Format of date in “end by” field in reccuring events details
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.displayed_event_color">
            <summary>
            Sets the default background color for the events
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.displayed_event_text_color">
            <summary>
            Sets the default font color for events
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.check_limits">
            <summary>
            Activates/disables checking of limits (by default, true). It has sense to disable this option when you don't set any limits and just make some highlighting or mark the current time - this will increase the performance speed. But if you have some limit set, disabling this option will disable all the 'blocking' methods
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.fix_tab_position">
            <summary>
            By default, the dhx_terrace skinned scheduler presents the views tabs on the left side. To place the tabs on the right side - set the option to false
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.use_select_menu_space">
            <summary>
            By default, events occupies just a part of the cell width and leave the place for the left-side menu. Set the option to false and events will start to occupy the whole width
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerConfig.collision_limit">
            <summary>
            Configuration for Collision extension. Max number of events per time slot
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Settings.SchedulerConfig.MapTypes">
            <summary>
            Types of Google map in MapView
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerConfig.MapTypes.HYBRID">
            <summary>
            Displays a transparent layer of major streets on satellite images.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerConfig.MapTypes.ROADMAP">
            <summary>
            Displays a normal street map.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerConfig.MapTypes.SATELLITE">
            <summary>
            Displays satellite images.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerConfig.MapTypes.TERRAIN">
            <summary>
            Displays maps with physical features such as terrain and vegetation.
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Settings.SchedulerConfig.LightboxRecurring">
            <summary>
            Lightbox behavior while opening in the edit mode
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerConfig.LightboxRecurring.Ask">
            <summary>
            Before the lightbox is opened a message box alerts and asks the user whether he will edit a certain instance or the entire recurring event
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerConfig.LightboxRecurring.Instance">
            <summary>
            The lightbox opens straight for editing a certain instance of the event.
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerConfig.LightboxRecurring.Series">
            <summary>
            The lightbox opens straight for editing the entire recurring event.
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Settings.SchedulerTemplates">
            <summary>
            Templates are formatting functions, normally you don't need to define anything, they will be auto-created according to default config. 
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerTemplates._templateTypes">
            <summary>
            Templates by type
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerTemplates._getType(System.String)">
            <summary>
            Get template type
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerTemplates._renderTemplate(System.String,System.String)">
            <summary>
            Render template to js function
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns>JS code</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerTemplates.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render settings
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerTemplates.#ctor">
            <summary>
            Create new instance of scheduler templates configurator
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.EventBox">
            <summary>
            Define custom HTML template for scheduler events
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.day_date">
            <summary>
            Date in header of day view
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.week_date">
            <summary>
            Date in header of week view
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.month_date">
            <summary>
            Date in header of month view
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.day_scale_date">
            <summary>
            Date in sub-header of day view
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.week_scale_date">
            <summary>
            Date in sub-header of week view
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.month_scale_date">
            <summary>
            Days of week on month view
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.hour_scale">
            <summary>
            y-scale on day and week views
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.xml_date">
            <summary>
            String to date parser used to convert data from XML
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.xml_format">
            <summary>
            Date to str converter used to send data back to server;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.api_date">
            <summary>
            Template used for date in events
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.event_header">
            <summary>
            Defines text label in header of event ( date );
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.event_text">
            <summary>
            Defines text in middle part of event ( text );
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.event_bar_date">
            <summary>
            Event_bar_date - defines date for event bars in month view;
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.event_bar_text">
            <summary>
            Defines text for event bars in month view
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.lightbox_header">
            <summary>
            Defines text form lightbox header
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.event_class">
            <summary>
            Assings css class to event
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.month_date_class">
            <summary>
            Assings css class to month date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.week_date_class">
            <summary>
            Assings css class to week date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.tooltip_text">
            <summary>
            Configuration for Tooltip extension. Define what should be displayed inside tooltip
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.agenda_time">
            <summary>
            Template for AgendaView. First column, event's date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.agenda_text">
            <summary>
            Template for AgendaView. Second column, event's text
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.year_month">
            <summary>
            Template for YearView. Defines header for each month block
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.year_date">
            <summary>
            Template for YearView. Defines the date label on the header line
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.year_scale_date">
            <summary>
            Template for YearView. Defines date number for each day
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.year_tooltip">
            <summary>
            Template for YearView. Defines text of event , which will be visible inside a tooltip
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.timeline_scale_date">
            <summary>
            Template for TimelineView. Format of date in the x-scale (3.0+ version)
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.timeline_scale_label">
            <summary>
            Template for TimelineView. Text for the y-scale cells
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.timeline_scalex_class">
            <summary>
            Template for TimelineView. Css class for x-scale header
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.timeline_second_scalex_class">
            <summary>
            Template for TimelineView. Css class for second x-scale header
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.timeline_second_scale_date">
            <summary>
            Template for TimelineView. Format of date in the second scale
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.timeline_scaley_class">
            <summary>
            Template for TimelineView. Css class for y-scale cells.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.timeline_cell_class">
            <summary>
            Template for TimelineView. Css class for timeline cells.
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.timeline_cell_value">
            <summary>
            Template for TimelineView. Displayed value of cells in Cell mode of Timeline view
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.timeline_date">
            <summary>
            Template for TimelineView. Date format
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.timeline_tooltip">
            <summary>
            Template for TimelineView. Template for tooltips in cell mode of timeline view 
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.map_time">
            <summary>
            Template for MapView. First column, event's date
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.map_text">
            <summary>
            Template for MapView. Second column, event's text
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.marker_text">
            <summary>
            Template for MapView. Template for marker text
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.marker_date">
            <summary>
            Template for MapView. Date format for marker
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerTemplates.week_agenda_event_text">
            <summary>
            Template for event description in WeekAgendaView
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Settings.SchedulerTemplates.TemplateTypes">
            <summary>
            Types of templates
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerTemplates.TemplateTypes.Date">
            <summary>
            function(date){..}
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerTemplates.TemplateTypes.Period">
            <summary>
            function(date1, date2){..}
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerTemplates.TemplateTypes.Event">
            <summary>
            function(start,end,ev){..}
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerTemplates.TemplateTypes.Timeline">
            <summary>
            function(section_id, section_label, section_options){}
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerTemplates.TemplateTypes.TimelineCell">
            <summary>
            function(evs, date, section){}
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.SchedulerTemplates.TemplateTypes.Invalid">
            <summary>
            unknown type
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Settings.SchedulerXY">
            <summary>
            Dimentions
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.SchedulerXY.#ctor">
            <summary>
            Create new instance of SchedulerXY
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.bar_height">
            <summary>
            Height of event bars in month view
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.editor_width">
            <summary>
            The width of event text input
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.margin_left">
            <summary>
            Left margin of the calendar
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.margin_top">
            <summary>
            Top margin of the calendar
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.menu_width">
            <summary>
            Width of selection menu on the day|week views
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.min_event_height">
            <summary>
            Minimal height of displayed event
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.month_scale_height">
            <summary>
            Height of the month cells in month view
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.nav_height">
            <summary>
            Height of top area with navigation buttons and tabs
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.scale_height">
            <summary>
            Height of x-scale
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.scale_width">
            <summary>
            Width of y-scale
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.scroll_width">
            <summary>
            Expected width of scrollbar
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.map_date_width">
            <summary>
            Following option are available only on MapView. 
            Width of date column
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Settings.SchedulerXY.map_description_width">
            <summary>
            Following option are available only on MapView. Width of event description column.
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.Template.DateToString(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="variable"></param>
            <param name="dateFormat"></param>
            <returns></returns>
        </member>
        <member name="F:DHTMLX.Scheduler.Settings.Template.PropertyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.Template.ReplaceVariable(System.Text.RegularExpressions.Match)">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Settings.EventTemplate">
            <summary>
            Renderer for event templates
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.EventTemplate.Render(System.String)">
            <summary>
            Render template
            </summary>
            <returns>JS function</returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Settings.DateTemplate">
            <summary>
            Renderer for date templates
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.DateTemplate.Render(System.String)">
            <summary>
            Render template
            </summary>
            <returns>JS function</returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Settings.PeriodTemplate">
            <summary>
            Renderer for time period templates
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.PeriodTemplate.Render(System.String)">
            <summary>
            Render template
            </summary>
            <returns>JS function</returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Settings.TimelineScaleTemplate">
            <summary>
            Renderer for timeline scale templates
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.TimelineScaleTemplate.Render(System.String)">
            <summary>
            Render template
            </summary>
            <returns>JS function</returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Settings.TimelineCellTemplate">
            <summary>
            Renderer for timeline timeline cell templates
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Settings.TimelineCellTemplate.Render(System.String)">
            <summary>
            Render template
            </summary>
            <returns>JS function</returns>
        </member>
        <member name="T:DHTMLX.Scheduler.Authentication.SchedulerUser">
            <summary>
            Class which allows to pass current user setting to client and define users permissions.
            Settings will be rendered to json object and stored in scheduler.currentUser field
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Authentication.SchedulerUser._hidden">
            <summary>
            Properties for inner use
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUser.SetUserDetails(System.Object)">
            <summary>
            Get object, which will be passed to the client like scheduler.currentUser = JSONObject;
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUser.#ctor">
            <summary>
            Create new instance of SchedulerUser
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUser.SetUserDetails(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Get object, which will be passed to the client like scheduler.currentUser = JSONArray;
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUser.Render(System.Text.StringBuilder,System.String)">
            <summary>
            Render settings to JS code
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Authentication.SchedulerUser.IsEmpty">
            <summary>
            Return true if object has some non-default settings
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Authentication.SchedulerUser.UserIdKey">
            <summary>
            Name of property which contains user id value
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Authentication.SchedulerUser.EventUserIdKey">
            <summary>
            Name of property of event, which will be compared to the user id value
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Authentication.SchedulerUser.Modes">
            <summary>
            Get/Set user rights
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Authentication.EditModes">
            <summary>
            Permission levels
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Authentication.EditModes.FullAccess">
            <summary>
            Users allowed to create and modify events
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Authentication.EditModes.AuthenticatedOnly">
            <summary>
            Only authenticated users can create or modify events
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Authentication.EditModes.OwnEventsOnly">
            <summary>
            Users may edit only they own events
            </summary>
        </member>
        <member name="F:DHTMLX.Scheduler.Authentication.EditModes.Forbid">
            <summary>
            Users not allowed to create or modify events
            </summary>
        </member>
        <member name="T:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions">
            <summary>
            Class wich is responsible for user permission settings
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions._forbid">
            <summary>
            Set scheduler to readonly mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions._fullAccess">
            <summary>
            Full access
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions._authorizedOnly">
            <summary>
            JS expression which allow edit scheduler content only to authorized users
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions._ownEventsOnly">
            <summary>
            JS expression which allow users to edit only they own events
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions._innerId">
            <summary>
            property name for event user id
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions._addUserIdToNewEvent">
            <summary>
            JS expression which should add user id property to event
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions._getCondition">
            <summary>
            Definition of function which define if selected event is editable
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions.#ctor">
            <summary>
            Create new instance of SchedulerUserPermissions
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions.clearRepeatedModes">
            <summary>
            Leave only the unique modes
            </summary>
        </member>
        <member name="M:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions.Render">
            <summary>
            Render settings
            </summary>
            <returns>JS code</returns>
        </member>
        <member name="P:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions.Modes">
            <summary>
            Collection of permission settings
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions.IsAuthorized">
            <summary>
            Whether the user's authorized
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions.UserIdKey">
            <summary>
            Name of property which contains user id value
            </summary>
        </member>
        <member name="P:DHTMLX.Scheduler.Authentication.SchedulerUserPermissions.UserIdKeyInEvent">
            <summary>
            Name of property of event, which will be compared to the user id value
            </summary>
        </member>
    </members>
</doc>
